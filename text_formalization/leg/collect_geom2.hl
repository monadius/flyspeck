(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Lemma: NUHSVLM                                                      *)
(* Chapter: leg                                                               *)
(* Author:  Nguyen Quang Truong                                              *)
(* Date: 2010-02-09                                                           *)
(* ========================================================================== *)


(* second half of collect_geom.ml.  
It was split in half by thales Feb 2010.

This file was edited by thales on 2012-5-15
to make it possible to load everything up through lemma GDRQXLG
giving the formula for the circumradius of a simplex.

Everything dependent on unproved axioms was commented out.

Feb 2013, Sep 2014, some excess material removed.
 *)

needs "Multivariate/cross.ml";;
needs "Multivariate/convex.ml";;
needs "Multivariate/vectors.ml";;

flyspeck_needs "general/hales_tactic.hl";;
flyspeck_needs "general/sphere.hl";;
flyspeck_needs "leg/cayleyR_def.hl";;
flyspeck_needs "leg/collect_geom.hl";;
flyspeck_needs "leg/geomdetail.hl";;

module Collect_geom2 (* : Collect_geom2_type *)  = struct

  open Sphere;;
  open Geomdetail;;
  open Collect_geom;;
  open Hales_tactic;;


  let cayleyR = Cayleyr.cayleyR;;

  let REAL_LDISTRIB = REAL_ADD_LDISTRIB;;
  let POW_2 = REAL_POW_2;;
  let REAL_POSSQ = REAL_LT_SQUARE;;
  let REAL_RDISTRIB = REAL_ARITH 
    `!x y z. (x + y) * z = (x * z) + (y * z)`;;  (* Tactics_jordan *)

(* deprecated def from sphere.hl *)  
  let mk_vec3 = new_definition 
  `mk_vec3 a b c = vector[a; b; c]`;;
  let real3_of_triple = new_definition 
    `real3_of_triple (a,b,c) = (mk_vec3 a b c):real^3`;;
  let triple_of_real3 = new_definition 
    `triple_of_real3 (v:real^3) = 
    (v$1, v$2, v$3)`;;  
(* deprecated def from sphere.hl *)

(* Nov 14, 2014.  Redo CAYLEYR_5POINTS *)

let lemma_span4 = prove                                                           
 (`!a b c d:real^3.                                                         
        ~(a = b) /\ ~(a = c) /\ ~(a = d) /\ ~(b = c) /\ ~(b = d) /\ ~(c = d)
        ==> a IN span {b,c,d} \/       
            b IN span {c,d,a} \/      
            c IN span {d,a,b} \/
            d IN span {a,b,c}`,                                    
  REPEAT STRIP_TAC THEN                                     
  MP_TAC(ISPEC `{a:real^3,b,c,d}` DEPENDENT_BIGGERSET) THEN 
  ASM_REWRITE_TAC[FINITE_INSERT; FINITE_EMPTY] THEN               
  SIMP_TAC[CARD_CLAUSES; FINITE_INSERT; FINITE_EMPTY] THEN        
  ASM_REWRITE_TAC[IN_INSERT; NOT_IN_EMPTY; DIMINDEX_3; ARITH] THEN           
  REWRITE_TAC[dependent; EXISTS_IN_INSERT; NOT_IN_EMPTY] THEN                
  ASM_REWRITE_TAC[DELETE_INSERT; EMPTY_DELETE] THEN REWRITE_TAC[INSERT_AC]);;
                  
let lemma_span4_pairwise = prove 
 (`!a b c d:real^3.                     
     PAIRWISE (\x y. ~(x = y)) [a;b;c;d]
     ==> a IN span {b, c, d} \/
         b IN span {c, d, a} \/
         c IN span {d, a, b} \/
         d IN span {a, b, c}`,                         
  REWRITE_TAC[PAIRWISE; ALL; GSYM CONJ_ASSOC; lemma_span4]);;

let lemma_span4_explicit = prove      
 (`!a b c d:real^3.       
        ~(a = b) /\ ~(a = c) /\ ~(a = d) /\ ~(b = c) /\ ~(b = d) /\ ~(c = d)    
        ==> (?u v w. a = u % b + v % c + w % d) \/                              
            (?u v w. b = u % c + v % d + w % a) \/                              
            (?u v w. c = u % d + v % a + w % b) \/                              
            (?u v w. d = u % a + v % b + w % c)`,                               
  REPEAT GEN_TAC THEN DISCH_THEN(MP_TAC o MATCH_MP lemma_span4) THEN
  REWRITE_TAC[SPAN_3; IN_ELIM_THM; IN_UNIV]);;

let lemma_span4_cases = prove_by_refinement(
  `!a b c d:real^3.       
        (?u v w. a = u % b + v % c + w % d) \/                              
            (?u v w. b = u % c + v % d + w % a) \/                              
            (?u v w. c = u % d + v % a + w % b) \/                              
            (?u v w. d = u % a + v % b + w % c)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `~(a = b) /\ ~(a = c) /\ ~(a = d) /\ ~(b = c) /\ ~(b = d) /\ ~(c = d)    ` ASM_CASES_TAC;
    MATCH_MP_TAC lemma_span4_explicit;
    BY(ASM_REWRITE_TAC[]);
  POP_ASSUM MP_TAC;
  REWRITE_TAC[DE_MORGAN_THM];
  TYPIFY `!a b c d. (a = b:real^3) ==> (?u v w. a = u % b + v % c + w % d)` ENOUGH_TO_SHOW_TAC;
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `!u1 u2 u3:real^3. (u1 + u2 + u3 = u2 + u1 + u3) /\ (u1 + u2 + u3 = u1 + u3 + u2)` (C SUBGOAL_THEN ASSUME_TAC);
      BY(MESON_TAC[VECTOR_ADD_AC]);
    BY(ASM_MESON_TAC[]);
  REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  GEXISTL_TAC [`&1`;`&0`;`&0`];
  BY(VECTOR_ARITH_TAC)
  ]);;
  (* }}} *)

let DOT_LSUB  = prove_by_refinement(
  `!x y (z:real^A). (x - y) dot z = x dot z - y dot z`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  BY(VECTOR_ARITH_TAC)
  ]);;
  (* }}} *)

let DOT_RSUB  = prove_by_refinement(
  `!x y (z:real^A). x dot (y - z) = x dot y - x dot z `,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  BY(VECTOR_ARITH_TAC)
  ]);;
  (* }}} *)

let CAYLEYR_5POINTS_WLOG_0 = prove_by_refinement(`  (!x2 x3 (x4:real^3) x5. 
	(let x12 = dist (vec 0,x2) pow 2 in
         let x13 = dist (vec 0,x3) pow 2 in
         let x14 = dist (vec 0,x4) pow 2 in
         let x15 = dist (vec 0,x5) pow 2 in
         let x23 = dist (x2,x3) pow 2 in
         let x24 = dist (x2,x4) pow 2 in
         let x25 = dist (x2,x5) pow 2 in
         let x34 = dist (x3,x4) pow 2 in
         let x35 = dist (x3,x5) pow 2 in
         let x45 = dist (x4,x5) pow 2 in
         (cayleyR x12 x13 x14 x15 x23 x24 x25 x34 x35 x45 = &0))) ==>
	(!x1 x2 x3 (x4:real^3) x5. 
	(let x12 = dist (x1,x2) pow 2 in
         let x13 = dist (x1,x3) pow 2 in
         let x14 = dist (x1,x4) pow 2 in
         let x15 = dist (x1,x5) pow 2 in
         let x23 = dist (x2,x3) pow 2 in
         let x24 = dist (x2,x4) pow 2 in
         let x25 = dist (x2,x5) pow 2 in
         let x34 = dist (x3,x4) pow 2 in
         let x35 = dist (x3,x5) pow 2 in
         let x45 = dist (x4,x5) pow 2 in
         (cayleyR x12 x13 x14 x15 x23 x24 x25 x34 x35 x45 = &0)))					   `,
  (* {{{ proof *)
  [
  ONCE_REWRITE_TAC[DIST_SYM];
  REWRITE_TAC[DIST_0];
  REWRITE_TAC[dist];
  REWRITE_TAC[LET_THM];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`x2 - x1:real^3`;`x3 - x1:real^3`;`x4 - x1:real^3`;`x5 - x1:real^3`]);
  BY(REWRITE_TAC[arith `(xi - (x1:real^3)) - (xj - x1) = xi - xj`])
  ]);;
  (* }}} *)

let CAYLEYR_5POINTS_SIMPLE = time prove_by_refinement(`  !x2 x3 (x4:real^3) t2 t3 t4. 
	(let x5 = t2 % x2 + t3 % x3 + t4 % x4 in
         let x12 = dist (vec 0,x2) pow 2 in
         let x13 = dist (vec 0,x3) pow 2 in
         let x14 = dist (vec 0,x4) pow 2 in
         let x15 = dist (vec 0,x5) pow 2 in
         let x23 = dist (x2,x3) pow 2 in
         let x24 = dist (x2,x4) pow 2 in
         let x25 = dist (x2,x5) pow 2 in
         let x34 = dist (x3,x4) pow 2 in
         let x35 = dist (x3,x5) pow 2 in
         let x45 = dist (x4,x5) pow 2 in
         (cayleyR x12 x13 x14 x15 x23 x24 x25 x34 x35 x45 = &0)) `,
[
  REPEAT GEN_TAC;
  REWRITE_TAC[LET_THM];
  REWRITE_TAC[DIST_0];
  ONCE_REWRITE_TAC[DIST_SYM];
  REWRITE_TAC[dist;NORM_POW_2];
  REWRITE_TAC[arith `(t2 % x2 + t3 % x3 + t4 % x4) - x2 = (t2 - &1) % x2 + t3 % x3 + t4 % x4`];
  REWRITE_TAC[arith `(t2 % x2 + t3 % x3 + t4 % x4) - x3 = (t2) % x2 + (t3 - &1) % x3 + t4 % x4`];
  REWRITE_TAC[arith `(t2 % x2 + t3 % x3 + t4 % x4) - x4 = (t2) % x2 + (t3) % x3 + (t4 - &1) % x4`];
  REWRITE_TAC[DOT_LADD;DOT_RADD;DOT_LMUL;DOT_RMUL;DOT_LSUB;DOT_RSUB];
  REWRITE_TAC[DOT_SYM];
  TYPED_ABBREV_TAC `nx2 = x2 dot x2`;
  TYPED_ABBREV_TAC `nx3 = x3 dot x3`;
  TYPED_ABBREV_TAC `nx4 = x4 dot x4`;
  TYPED_ABBREV_TAC `d23 = x2 dot x3`;
  TYPED_ABBREV_TAC `d24 = x2 dot x4`;
  TYPED_ABBREV_TAC `d34 = x3 dot x4`;
  REWRITE_TAC[Cayleyr.cayleyR];
  BY(REAL_ARITH_TAC)
					 ]);; 

let CAYLEYR_5POINTS = prove_by_refinement(`  !x1 x2 x3 x4 (x5 :real^3). 
         (let x12 = dist (x1,x2) pow 2 in
         let x13 = dist (x1,x3) pow 2 in
         let x14 = dist (x1,x4) pow 2 in
         let x15 = dist (x1,x5) pow 2 in
         let x23 = dist (x2,x3) pow 2 in
         let x24 = dist (x2,x4) pow 2 in
         let x25 = dist (x2,x5) pow 2 in
         let x34 = dist (x3,x4) pow 2 in
         let x35 = dist (x3,x5) pow 2 in
         let x45 = dist (x4,x5) pow 2 in
         cayleyR x12 x13 x14 x15 x23 x24 x25 x34 x35 x45 = &0) `,
  (* {{{ proof *)
  [
  MATCH_MP_TAC CAYLEYR_5POINTS_WLOG_0;
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC lemma_span4_cases [`x2`;`x3`;`x4`;`x5`];
  TYPIFY `?u v w. x5 = u % x2 + v % x3 + w % x4` ASM_CASES_TAC;
    ASM_REWRITE_TAC[] THEN POP_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
    INTRO_TAC CAYLEYR_5POINTS_SIMPLE [`x2`;`x3`;`x4`;`u`;`v`;`w`];
    BY(SIMP_TAC[LET_THM]);
  ASM_REWRITE_TAC[];
  DISCH_THEN DISJ_CASES_TAC;
    POP_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
    INTRO_TAC CAYLEYR_5POINTS_SIMPLE [`x3`;`x4`;`x5`;`u`;`v`;`w`];
    POP_ASSUM (ASSUME_TAC o GSYM);
    ASM_SIMP_TAC[LET_THM;DIST_SYM];
    DISCH_TAC;
    TYPIFY_GOAL_THEN `!x20 x30 x40 x50 x23 x24 x25 x34 x35 x45. cayleyR x20 x30 x40 x50 x23 x24 x25 x34 x35 x45 = cayleyR x30 x40 x50 x20 x34 x35 x23 x45 x24 x25` (unlist ONCE_REWRITE_TAC);
      REWRITE_TAC[Cayleyr.cayleyR];
      BY(REAL_ARITH_TAC);
    BY(ASM_REWRITE_TAC[]);
  FIRST_X_ASSUM DISJ_CASES_TAC;
    POP_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
    INTRO_TAC CAYLEYR_5POINTS_SIMPLE [`x4`;`x5`;`x2`;`u`;`v`;`w`];
    POP_ASSUM (ASSUME_TAC o GSYM);
    ASM_SIMP_TAC[LET_THM;DIST_SYM];
    DISCH_TAC;
    TYPIFY_GOAL_THEN `!x20 x30 x40 x50 x23 x24 x25 x34 x35 x45. cayleyR x20 x30 x40 x50 x23 x24 x25 x34 x35 x45 = cayleyR x40 x50 x20 x30 x45 x24 x34 x25 x35 x23` (unlist ONCE_REWRITE_TAC);
      REWRITE_TAC[Cayleyr.cayleyR];
      BY(REAL_ARITH_TAC);
    BY(ASM_REWRITE_TAC[]);
  POP_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  INTRO_TAC CAYLEYR_5POINTS_SIMPLE [`x5`;`x2`;`x3`;`u`;`v`;`w`];
  POP_ASSUM (ASSUME_TAC o GSYM);
  ASM_SIMP_TAC[LET_THM;DIST_SYM];
  DISCH_TAC;
  TYPIFY_GOAL_THEN `!x20 x30 x40 x50 x23 x24 x25 x34 x35 x45. cayleyR x20 x30 x40 x50 x23 x24 x25 x34 x35 x45 = cayleyR x50 x20 x30 x40 x25 x35 x45 x23 x24 x34` (unlist ONCE_REWRITE_TAC);
    REWRITE_TAC[Cayleyr.cayleyR];
    BY(REAL_ARITH_TAC);
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)


(* it takes a long time to run it. Proof has been redone above. *)

(*
let CAYLEYR_5POINTS = time prove_by_refinement(`  !x1 x2 x3 x4 (x5 :real^3). 
         let x12 = dist (x1,x2) pow 2 in
         let x13 = dist (x1,x3) pow 2 in
         let x14 = dist (x1,x4) pow 2 in
         let x15 = dist (x1,x5) pow 2 in
         let x23 = dist (x2,x3) pow 2 in
         let x24 = dist (x2,x4) pow 2 in
         let x25 = dist (x2,x5) pow 2 in
         let x34 = dist (x3,x4) pow 2 in
         let x35 = dist (x3,x5) pow 2 in
         let x45 = dist (x4,x5) pow 2 in
         cayleyR x12 x13 x14 x15 x23 x24 x25 x34 x35 x45 = &0 `,
[
  LET_TR;
  REWRITE_TAC[ DIST_POW2_DOT] THEN REPEAT GEN_TAC;
  REWRITE_TAC[ MESON[VECTOR_ARITH` (a:real^n) - b = a - x - ( b - x ) `]`  AA ( (x1 - x5 ) dot ( x1 - x5)) ((x2 - x3) dot (x2 - x3)) ((x2 - x4) dot (x2 - x4)) ((x2 - x5) dot (x2 - x5)) ((x3 - x4) dot (x3 - x4)) ((x3 - x5) dot (x3 - x5)) ((x4 - x5) dot (x4 - x5)) =  AA ( (x1 - x5 ) dot ( x1 - x5)) ((x2 - x1 - ( x3 - x1 )) dot (x2 - x1 - ( x3 - x1 )))  ((x2 - x1 - ( x4 - x1 )) dot (x2 - x1 - ( x4 - x1 )))  ((x2 - x1 - ( x5 - x1 )) dot (x2 - x1 - ( x5 - x1 )))  ((x3 - x1 - ( x4 - x1 )) dot (x3 - x1 - ( x4 - x1 )))  ((x3 - x1 - ( x5 - x1 )) dot (x3 - x1 - ( x5 - x1 )))    ((x4 - x1 - ( x5 - x1 )) dot (x4 - x1 - ( x5 - x1 ))) ` ];
  SIMP_TAC[VECTOR_ARITH ` ((x4: real^N) - x1 - (x5 - x1)) = x1 - x5 - ( x1 - x4 ) `];
  ABBREV_TAC ` x12 = (x1 - ( x2:real^3)) `;
  ABBREV_TAC ` x13 = (x1 - ( x3:real^3)) `;
  ABBREV_TAC ` x14 = (x1 - ( x4:real^3)) `;
  ABBREV_TAC ` x15 = (x1 - ( x5:real^3)) `;
  REWRITE_TAC[DOT_3];
  REWRITE_TAC[lemma_cm3; cayleyR];
  REWRITE_TAC[arith `(a - b) * (c - d) = (a * c + b * d - b * c - a * d)`];
  BY(REAL_ARITH_TAC)
					 ]);; 

*)

let LEMMA3 = prove(` !x1 x2 x3 x4 (x5 :real^3). 
                 let x12 = dist (x1,x2) pow 2 in
         let x13 = dist (x1,x3) pow 2 in
         let x14 = dist (x1,x4) pow 2 in
         let x15 = dist (x1,x5) pow 2 in
         let x23 = dist (x2,x3) pow 2 in
         let x24 = dist (x2,x4) pow 2 in
         let x25 = dist (x2,x5) pow 2 in
         let x34 = dist (x3,x4) pow 2 in
         let x35 = dist (x3,x5) pow 2 in
         let x45 = dist (x4,x5) pow 2 in
         &0 <= ups_x x12 x13 x23 /\
         &0 <= delta x12 x13 x14 x23 x24 x34 /\
         cayleyR x12 x13 x14 x15 x23 x24 x25 x34 x35 x45 = &0 `, MP_TAC 
CAYLEYR_5POINTS THEN LET_TR THEN 
SIMP_TAC[ dist; UPS_X_POS; DELTA_POS_4POINTS]);;


(* LEMMA 3 *)
let NUHSVLM = LEMMA3;;


let PRE_VIET = 
REAL_ARITH `!x x1 x2. (x - x1) * (x - x2) = x pow 2 - (x1 + x2) * x + x1 * x2 /\
 a * (x - x1) * (x - x2) = a * x pow 2 + ( -- a * (x1 + x2)) * x + a * x1 * x2 `;;

(* le 33. P 22 MARKED *)

let b_coef = BC_DEL_FOR;;
let c_coef = b_coef ;;

let EQ_POW2_COND = prove(`!a b. &0 <= a /\ &0 <= b ==> (a = b <=> a pow 2 = b pow 2)`,
REWRITE_TAC[REAL_ARITH` a = b <=> a <= b /\ b <= a `] THEN SIMP_TAC[POW2_COND]);;

let LT_POW2_EQ_LT = MESON[POW2_COND_LT; REAL_ARITH ` a <= b <=> ~ ( b < a ) `]
`&0 < a /\ &0 < b ==> ( a < b <=> a pow 2 < b pow 2 ) `;;

let FACTOR_OF_QUADRARTIC = prove(`! a b c x. ~(a = &0) /\ 
&0 <= b pow 2 - &4 * a * c ==> a * x pow 2 + b * x + c =
     a *
     (x - (--b + sqrt (b pow 2 - &4 * a * c)) / (&2 * a)) *
     (x - (--b - sqrt (b pow 2 - &4 * a * c)) / (&2 * a))`   ,
REWRITE_TAC[PRE_VIET] THEN SIMP_TAC[REAL_FIELD ` ~( a = &0 ) ==> 
-- a * ( ( --b + del) / ( &2 * a ) + ( --b - del) / ( &2 * a )) = b `] THEN 
REWRITE_TAC[REAL_FIELD ` a / b * a' / b = ( a * a' ) / ( b pow 2 ) `] THEN 
REWRITE_TAC[REAL_FIELD ` a / b * a' / b = ( a * a' ) / ( b pow 2 ) `; 
  REAL_DIFFSQ; GSYM REAL_POW_2] THEN SIMP_TAC[SQRT_WORKS] THEN 
SIMP_TAC[REAL_FIELD ` ~ ( a = &0 ) ==> a * (--b pow 2 - 
 (b pow 2 - &4 * a * c)) / (&2 * a) pow 2 = c `]);;

let REAL_LE_RDIV_0 = prove(` ! a b. &0 < b ==> ( &0 <= a / b <=> &0 <= a ) `,
REWRITE_TAC[REAL_ARITH ` &0 <= a <=> &0 < a \/ a = &0 `] THEN 
SIMP_TAC[REAL_LT_RDIV_0] THEN 
SIMP_TAC[REAL_FIELD `&0 < b ==> ( a / b = &0 <=> a = &0 ) `]);;


(* NEW WORKS *)

let RELATE_POW2 = prove(` ( a = &0 <=> a pow 2 = &0 ) /\
  ( &0 < a pow 2 <=> &0 < a \/ ~( &0 <= a )) `,
MP_TAC (REAL_FIELD ` a = &0 <=> a pow 2 = &0 `) THEN DISCH_TAC THEN 
CONJ_TAC THENL [ASM_SIMP_TAC[]; MP_TAC REAL_LE_POW_2] THEN 
MP_TAC (REAL_ARITH `( ! a. &0 < a \/ ~(&0 <= a) \/ a = &0 )`) THEN 
MP_TAC (REAL_FIELD ` a = &0 <=> a pow 2 = &0 `) THEN 
REWRITE_TAC[REAL_ARITH ` A <= b <=> A = b \/ A < b `] THEN 
MESON_TAC[REAL_ARITH ` ~ ( a = &0 /\ ( &0 < a \/ ~( &0 <= a ) )) `]);;

let LT_POW2_COND = prove(`!a b. &0 <= a /\ &0 <= b ==> (a < b <=> a pow 2 < b pow 2)`,
REPEAT GEN_TAC THEN ASM_CASES_TAC ` a = &0 ` THENL
[ASM_SIMP_TAC[REAL_ARITH` &0 pow 2 = &0 `] THEN MESON_TAC[RELATE_POW2]; 
ASM_SIMP_TAC[REAL_LE_LT]] THEN STRIP_TAC THENL [ASM_MESON_TAC[LT_POW2_EQ_LT];
EXPAND_TAC "b"] THEN UNDISCH_TAC `&0 < a ` THEN REWRITE_TAC[REAL_ARITH `
 &0 pow 2 = &0 /\ (a < &0 <=> ~(&0 <= a))`] THEN MP_TAC REAL_LE_POW_2 THEN 
MESON_TAC[REAL_LT_IMP_LE]);;


let POS_IMP_POW2 = MESON[REAL_LE_TRANS; POW2_COND]` &0 <= a /\ a <= b ==> a pow 2 
  <= b pow 2 `;;



(*       THADGSB         *)




let CONVEX_HULL_4_EQUIV = prove(` ! v1 v2 v3 (v4:real^N).
  conv {v1,v2,v3,v4} = { x | ? a b c d. 
  &0 <= a /\
          &0 <= b /\
          &0 <= c /\
          &0 <= d /\
          a + b + c + d = &1 /\
          a % v1 + b % v2 + c % v3 + d % v4 = x } `,
REWRITE_TAC[conv; FUN_EQ_THM; affsign; lin_combo; UNION_EMPTY; 
 IN_ELIM_THM; sgn_ge] THEN 
REWRITE_TAC[MESON[]` x = vsum aa bb /\ a /\ b <=>
  a /\ b /\ vsum aa bb = x `] THEN 
ONCE_REWRITE_TAC[SET_RULE ` a s ==> b <=> s IN a ==> b `] THEN 
 SIMP_TAC[CONVEX_HULL_FINITE_STEP; FINITE_INSERT; FINITE_RULES] THEN
 REWRITE_TAC[REAL_ARITH `x - y = z:real <=> x = y + z`;
             VECTOR_ARITH `x - y = z:real^N <=> x = y + z`] THEN
 REWRITE_TAC[VECTOR_ADD_RID; REAL_ADD_RID] THEN MESON_TAC[IN]);;

let ECSEVNC = prove(`?t1 t2 t3 t4.
     !v1 v2 v3 v4 (v: real^3).
         ~coplanar_alt {v1, v2, v3, v4}
         ==> t1 v1 v2 v3 v4 v +
             t2 v1 v2 v3 v4 v +
             t3 v1 v2 v3 v4 v +
             t4 v1 v2 v3 v4 v =
             &1 /\
             v =
             t1 v1 v2 v3 v4 v % v1 +
             t2 v1 v2 v3 v4 v % v2 +
             t3 v1 v2 v3 v4 v % v3 +
             t4 v1 v2 v3 v4 v % v4 /\
             (!ta tb tc td.
                  v = ta % v1 + tb % v2 + tc % v3 + td % v4 /\
                  ta + tb + tc + td = &1
                  ==> ta = t1 v1 v2 v3 v4 v /\
                      tb = t2 v1 v2 v3 v4 v /\
                      tc = t3 v1 v2 v3 v4 v /\
                      td = t4 v1 v2 v3 v4 v) `,
REWRITE_TAC[GSYM SKOLEM_THM; RIGHT_EXISTS_IMP_THM] THEN REPEAT 
GEN_TAC THEN NHANH (SPEC_ALL (prove(`!v1 v2 v3 v0 v:real^3.
    ~coplanar_alt {v0, v1, v2, v3} ==> (?t1 t2 t3. v - v0 = t1 % (v1 - v0)
 + t2 % (v2 - v0) + t3 % (v3 - v0) /\ (!ta tb tc. v - v0 = ta % (v1 - v0)
 + tb % (v2 - v0) + tc % (v3 - v0)   ==> ta = t1 /\
 tb = t2 /\ tc = t3))`, SIMP_TAC[NONCOPLANAR_3_BASIS]))) THEN 
STRIP_TAC THEN EXISTS_TAC ` &1 - t1 - t2 - t3 ` THEN 
EXISTS_TAC ` t1:real ` THEN EXISTS_TAC ` t2:real ` THEN 
EXISTS_TAC ` t3:real ` THEN CONJ_TAC THENL [REAL_ARITH_TAC;
 CONJ_TAC] THENL [UNDISCH_TAC ` (v:real^3) - v1 = t1 % (v2 - v1) + 
t2 % (v3 - v1) + t3 % (v4 - v1)` THEN 
CONV_TAC VECTOR_ARITH; REPEAT GEN_TAC] THEN 
REWRITE_TAC[MESON[]` a /\ b ==> c <=> b ==> a ==> c `;
  REAL_ARITH ` ta + tb + tc + td = &1 <=> ta = &1 - tb - tc - td `] THEN 
SIMP_TAC[] THEN REWRITE_TAC[VECTOR_ARITH `   v = (&1 - tb - tc - td) % v1
 + tb % v2 + tc % v3 + td % v4 <=>  v - v1 = tb % ( v2 - v1 ) + 
tc % ( v3 - v1 ) + td % ( v4 - v1 ) `] THEN ASM_MESON_TAC[]);;

let COEFS_4 = new_specification ["COEF4_1"; "COEF4_2"; "COEF4_3"; "COEF4_4"] ECSEVNC ;;

let EQ_IMP_COPLANAR = prove(`! a b c (d:real^3). ( a = b \/ a = c \/ a = d )
 ==> coplanar_alt {a,b,c,d} `,
REPEAT STRIP_TAC THENL [
ASM_SIMP_TAC[SET_RULE ` a INSERT ( a INSERT s ) = a INSERT s `] THEN 
MP_TAC (DIMINDEX_3) THEN MESON_TAC[COPLANAR_3;  ARITH_RULE` a = 3 ==> 2 <= a `];
ONCE_REWRITE_TAC[SET_RULE` {a,b,v,c} = {a,v,b,c} `] THEN 
ASM_SIMP_TAC[SET_RULE ` a INSERT ( a INSERT s ) = a INSERT s `] THEN 
MP_TAC (DIMINDEX_3) THEN MESON_TAC[COPLANAR_3;  ARITH_RULE` a = 3 ==> 2 <= a `];
ONCE_REWRITE_TAC[SET_RULE` {a,b,v,c} = {a,c,v,b} `] THEN 
ASM_SIMP_TAC[SET_RULE ` a INSERT ( a INSERT s ) = a INSERT s `] THEN 
MP_TAC (DIMINDEX_3) THEN MESON_TAC[COPLANAR_3;  ARITH_RULE` a = 3 ==> 2 <= a `]]);;

let AFFINE_HULL_FINITE_STEP_GEN = prove
 (`!P:real^N->real->bool.
       ((?u. (!x. x IN {} ==> P x (u x)) /\
             sum {} u = w /\ vsum {} (\x. u(x) % x) = y) <=>
        w = &0 /\ y = vec 0) /\
       (FINITE(s:real^N->bool) /\
        (!y. a IN s /\ P a y ==> P a (y / &2)) /\
        (!x y. a IN s /\ P a x /\ P a y ==> P a (x + y))
        ==> ((?u. (!x. x IN (a INSERT s) ==> P x (u x)) /\
                  sum (a INSERT s) u = w /\
                  vsum (a INSERT s) (\x. u(x) % x) = y) <=>
             ?v u. P a v /\ (!x. x IN s ==> P x (u x)) /\
                   sum s u = w - v /\
                   vsum s (\x. u(x) % x) = y - v % a))`,
 GEN_TAC THEN SIMP_TAC[SUM_CLAUSES; VSUM_CLAUSES; NOT_IN_EMPTY] THEN
 CONJ_TAC THENL [MESON_TAC[]; ALL_TAC] THEN DISCH_TAC THEN
 ASM_CASES_TAC `(a:real^N) IN s` THEN ASM_REWRITE_TAC[] THENL
  [ASM_SIMP_TAC[SET_RULE `a IN s ==> a INSERT s = s`] THEN EQ_TAC THEN
   REWRITE_TAC[LEFT_IMP_EXISTS_THM] THENL
    [X_GEN_TAC `u:real^N->real` THEN STRIP_TAC THEN
     EXISTS_TAC `(u:real^N->real) a / &2` THEN
     EXISTS_TAC `\x:real^N. if x = a then u x / &2 else u x`;
     MAP_EVERY X_GEN_TAC [`v:real`; `u:real^N->real`] THEN
     STRIP_TAC THEN
     EXISTS_TAC `\x:real^N. if x = a then u x + v else u x`] THEN
   ASM_SIMP_TAC[] THEN (CONJ_TAC THENL [ASM_MESON_TAC[]; ALL_TAC]) THEN
   ONCE_REWRITE_TAC[COND_RAND] THEN ONCE_REWRITE_TAC[COND_RATOR] THEN
   ASM_SIMP_TAC[VSUM_CASES; SUM_CASES] THEN
   ASM_SIMP_TAC[GSYM DELETE; SUM_DELETE; VSUM_DELETE] THEN
   ASM_SIMP_TAC[SET_RULE `a IN s ==> {x | x IN s /\ x = a} = {a}`] THEN
   REWRITE_TAC[SUM_SING; VSUM_SING] THEN
   (CONJ_TAC THENL [REAL_ARITH_TAC; VECTOR_ARITH_TAC]);
   EQ_TAC THEN REWRITE_TAC[LEFT_IMP_EXISTS_THM] THENL
    [X_GEN_TAC `u:real^N->real` THEN STRIP_TAC THEN
     EXISTS_TAC `(u:real^N->real) a` THEN
     EXISTS_TAC `u:real^N->real` THEN ASM_SIMP_TAC[IN_INSERT] THEN
     REPEAT(FIRST_X_ASSUM(SUBST1_TAC o SYM)) THEN
     CONJ_TAC THENL [REAL_ARITH_TAC; VECTOR_ARITH_TAC];
     MAP_EVERY X_GEN_TAC [`v:real`; `u:real^N->real`] THEN
     STRIP_TAC THEN
     EXISTS_TAC `\x:real^N. if x = a then v:real else u x` THEN
     ASM_SIMP_TAC[IN_INSERT] THEN CONJ_TAC THENL
      [ASM_MESON_TAC[]; ALL_TAC] THEN
     ONCE_REWRITE_TAC[COND_RAND] THEN ONCE_REWRITE_TAC[COND_RATOR] THEN
     ASM_SIMP_TAC[VSUM_CASES; SUM_CASES] THEN
     ASM_SIMP_TAC[GSYM DELETE; SUM_DELETE; VSUM_DELETE] THEN
     ASM_SIMP_TAC[SET_RULE `~(a IN s) ==> {x | x IN s /\ x = a} = {}`] THEN
     ASM_SIMP_TAC[SET_RULE `~(a IN s) ==> s DELETE a = s`] THEN
     REWRITE_TAC[SUM_CLAUSES; VSUM_CLAUSES] THEN
     CONJ_TAC THENL [REAL_ARITH_TAC; VECTOR_ARITH_TAC]]]);;

let INSET3 = SET_RULE` a IN {a,b,c} /\ b IN {a,b,c} /\ c IN {a,b,c} `;;

let AFF_GT33 = prove(`! (v1:real^N) v2 v3 w1 w2 w3.
     {v1, v2, v3} INTER {w1, w2, w3} = {}
     ==> aff_gt {v1, v2, v3} {w1, w2, w3} =
         {x | ?a1 a2 a3 b1 b2 b3.
                  &0 < b1 /\
                  &0 < b2 /\
                  &0 < b3 /\
                  a1 + a2 + a3 + b1 + b2 + b3 = &1 /\
                  x =
                  a1 % v1 + a2 % v2 + a3 % v3 + b1 % w1 + b2 % w2 + b3 % w3}`,
REWRITE_TAC[aff_gt_def; FUN_EQ_THM; affsign; lin_combo; sgn_gt] THEN 
REPEAT STRIP_TAC THEN 
MATCH_MP_TAC EQ_TRANS  THEN 
REWRITE_TAC[SET_RULE ` ( a INSERT b ) UNION c =
   b UNION ( a INSERT c ) /\ {} UNION b = b `] THEN 
EXISTS_TAC ` (? f. x = vsum {v3, v2, v1, w1, w2, w3} (\v. f v % v) /\
           (!(w:real^N). w IN {v3,v2,v1, w1, w2, w3} ==> w IN {w1,w2,w3} ==>  &0 < f w) /\
           sum {v3, v2, v1, w1, w2, w3} f = &1 ) ` THEN 
REWRITE_TAC[SET_RULE` (!x. ({v1, v2, v3} INTER {w1, w2, w3}) x <=> {} x)
  <=> {v1, v2, v3} INTER {w1, w2, w3} = {} `] THEN 
CONJ_TAC THENL [ 
FIRST_X_ASSUM MP_TAC THEN 
REWRITE_TAC[SET_RULE` (!x. ({v1, v2, v3} INTER {w1, w2, w3}) x <=> {} x)
  <=> {v1, v2, v3} INTER {w1, w2, w3} = {} `] THEN 
MESON_TAC[SET_RULE` {v1, v2, v3} INTER {w1, w2, w3} = {} ==>
  ( (!w. {w1, w2, w3} w ==> &0 < f w) <=>
  (!w. w IN {v3, v2, v1, w1, w2, w3}
                ==> w IN {w1, w2, w3}
                ==> &0 < f w) ) `];
REWRITE_TAC[MESON[]` a /\ (!z. P z ) /\ aa = &1 <=>
  (!z. P z ) /\ aa = &1 /\ a `]] THEN 
ONCE_REWRITE_TAC[MESON[]` a = vsum b c <=> vsum b c = a `] THEN 
 SIMP_TAC[AFFINE_HULL_FINITE_STEP_GEN;FINITE_INSERT; CONJUNCT1 FINITE_RULES;
            RIGHT_EXISTS_AND_THM;
            REAL_ARITH `&0 < x /\ &0 < y ==> &0 < x + y`;
            REAL_ARITH `&0 < x  ==> &0 < x / &2 `] THEN 
FIRST_X_ASSUM MP_TAC THEN 
REWRITE_TAC[SET_RULE` (!x. ({v1, v2, v3} INTER {w1, w2, w3}) x <=> {} x)
  <=> {v1, v2, v3} INTER {w1, w2, w3} = {} `; SET_RULE` ( a INSERT s ) INTER ss = {} <=>
~ ( a IN ss ) /\ s INTER ss = {} `] THEN 
SIMP_TAC[INSET3] THEN 
SIMP_TAC[INSET3; REAL_ARITH` a - b = c <=> a = b + c `;
  VECTOR_ARITH` a:real^N - b = c <=> a = b + c `] THEN 
REWRITE_TAC[ GSYM  RIGHT_EXISTS_AND_THM; ZERO_NEUTRAL; 
 IN_ELIM_THM; VECTOR_ARITH ` a + vec 0 = a `] THEN 
DISCH_TAC THEN 
MESON_TAC[REAL_ARITH` a + b + c + d = c + b + a + d `;
  VECTOR_ARITH` ( a:real^N ) + b + c + d = c + b + a + d `]);;

let AFF_GE33 = prove_by_refinement(
`! (v1:real^N) v2 v3 w1 w2 w3.
     {v1, v2, v3} INTER {w1, w2, w3} = {}
     ==> aff_ge {v1, v2, v3} {w1, w2, w3} =
         {x | ?a1 a2 a3 b1 b2 b3.
                  &0 <= b1 /\
                  &0 <= b2 /\
                  &0 <= b3 /\
                  a1 + a2 + a3 + b1 + b2 + b3 = &1 /\
                  x =
                  a1 % v1 + a2 % v2 + a3 % v3 + b1 % w1 + b2 % w2 + b3 % w3}`,
  (* {{{ proof *)
  [
  (REWRITE_TAC[aff_gt_def; aff_ge_def; FUN_EQ_THM; affsign; lin_combo; sgn_gt; sgn_ge]);
  (REPEAT STRIP_TAC);
  (MATCH_MP_TAC EQ_TRANS );
  (REWRITE_TAC[SET_RULE ` ( a INSERT b ) UNION c =   b UNION ( a INSERT c ) /\ {} UNION b = b `]);
  (EXISTS_TAC ` (? f. x = vsum {v3, v2, v1, w1, w2, w3} (\v. f v % v) /\           (!(w:real^N). w IN {v3,v2,v1, w1, w2, w3} ==> w IN {w1,w2,w3} ==>  &0 <= f w) /\           sum {v3, v2, v1, w1, w2, w3} f = &1 ) `);
  (CONJ_TAC);
    (FIRST_X_ASSUM MP_TAC);
    (REWRITE_TAC[SET_RULE` (!x. ({v1, v2, v3} INTER {w1, w2, w3}) x <=> {} x)  <=> {v1, v2, v3} INTER {w1, w2, w3} = {} `]);
    BY((MESON_TAC[SET_RULE` {v1, v2, v3} INTER {w1, w2, w3} = {} ==>  ( (!w. {w1, w2, w3} w ==> &0 <= f w) <=>  (!w. w IN {v3, v2, v1, w1, w2, w3}                ==> w IN {w1, w2, w3}                ==> &0 <= f w) ) `]));
  (REWRITE_TAC[MESON[]` a /\ (!z. P z ) /\ aa = &1 <=>  (!z. P z ) /\ aa = &1 /\ a `]);
  (ONCE_REWRITE_TAC[MESON[]` a = vsum b c <=> vsum b c = a `]);
  ( SIMP_TAC[AFFINE_HULL_FINITE_STEP_GEN;FINITE_INSERT; CONJUNCT1 FINITE_RULES; RIGHT_EXISTS_AND_THM; REAL_ARITH `&0 <= x /\ &0 <= y ==> &0 <= x + y`; REAL_ARITH `&0 <= x  ==> &0 <= x / &2 `]);
  (FIRST_X_ASSUM MP_TAC);
  (REWRITE_TAC[SET_RULE` (!x. ({v1, v2, v3} INTER {w1, w2, w3}) x <=> {} x)  <=> {v1, v2, v3} INTER {w1, w2, w3} = {} `; SET_RULE` ( a INSERT s ) INTER ss = {} <=> ~ ( a IN ss ) /\ s INTER ss = {} `]);
   (SIMP_TAC[INSET3]);
   (SIMP_TAC[INSET3; REAL_ARITH` a - b = c <=> a = b + c `; VECTOR_ARITH` a:real^N - b = c <=> a = b + c `]);
   (REWRITE_TAC[ GSYM RIGHT_EXISTS_AND_THM; ZERO_NEUTRAL; IN_ELIM_THM; VECTOR_ARITH ` a + vec 0 = a `]);
   (DISCH_TAC);
  BY( (MESON_TAC[REAL_ARITH` a + b + c + d = c + b + a + d `; VECTOR_ARITH` ( a:real^N ) + b + c + d = c + b + a + d `]))
  ]);;
  (* }}} *)

let INSET3 = SET_RULE` a IN {a, b, c} /\ b IN {a, b, c} /\ c IN {a, b, c}
 /\ {a, b, c} a /\ {a, b, c} b /\ {a, b, c} c `;;

let AFF_LE_LT33 = prove(`! (v1:real^N) v2 v3 w1 w2 w3.
     {v1, v2, v3} INTER {w1, w2, w3} = {}
     ==> aff_le {v1, v2, v3} {w1, w2, w3} =
         {x | ?a1 a2 a3 b1 b2 b3.
                  b1 <= &0 /\
                  b2 <= &0  /\
                  b3 <= &0  /\
                  a1 + a2 + a3 + b1 + b2 + b3 = &1 /\
                  x =
                  a1 % v1 + a2 % v2 + a3 % v3 + b1 % w1 + b2 % w2 + b3 % w3} /\
   aff_lt {v1, v2, v3} {w1, w2, w3} =
         {x | ?a1 a2 a3 b1 b2 b3.
                  b1 < &0 /\
                  b2 < &0  /\
                  b3 < &0  /\
                  a1 + a2 + a3 + b1 + b2 + b3 = &1 /\
                  x =
                  a1 % v1 + a2 % v2 + a3 % v3 + b1 % w1 + b2 % w2 + b3 % w3} `,
REWRITE_TAC[IN_ELIM_THM; aff_le_def; FUN_EQ_THM; aff_lt_def; 
 affsign; lin_combo; sgn_lt; sgn_le] THEN 
REWRITE_TAC[SET_RULE` {v1, v2, v3} UNION {w1, w2, w3} = 
  {v1,v2,v3,w1,w2,w3} `] THEN 
ONCE_REWRITE_TAC[SET_RULE` {w1, w2, w3} w ==> P w <=>
  w IN {v1,v2,v3,w1,w2,w3} ==> {w1,w2,w3} w ==> P w `] THEN 
REWRITE_TAC[MESON[]` a = vsum aa bb /\
  (! w. P w ) /\ b <=> (! w. P w ) /\ b /\ vsum aa bb = a `] THEN 
 SIMP_TAC[AFFINE_HULL_FINITE_STEP_GEN;
            REAL_ARITH `( x < &0 /\ y < &0 ==> x + y < &0) /\ ( x <= &0 /\ y <= &0 ==> x + y <= &0)`;
            REAL_ARITH ` (x < &0 ==> x / &2 < &0 ) /\ (x <= &0 ==> x / &2 <= &0 )`;
            FINITE_INSERT; CONJUNCT1 FINITE_RULES
; RIGHT_EXISTS_AND_THM]  THEN 
SIMP_TAC[ GSYM RIGHT_EXISTS_AND_THM; SET_RULE ` 
  (!x. ({v1, v2, v3} INTER s ) x <=> {} x) <=>
  ~ ( s v1 ) /\ ~ ( s v2 ) /\ ~ ( s v3 ) `; INSET3] THEN 
REWRITE_TAC[REAL_ARITH` a - b = c <=> a = b + c`; REAL_ARITH `
  a + &0 = a `; VECTOR_ARITH` (a:real^N) - b = c <=> a = b + c`;
  VECTOR_ARITH` a + vec 0 = a `] THEN 
MESON_TAC[]);;

let AFF_GES_LTS = prove(` ! a b c (v0 :real^N). 
 ~ ( a = v0 ) /\ ~( b = v0 ) /\ ~( c = v0 ) ==>
aff_gt {a, b} {v0} =
          {x | ?ta tb t.
                   ta + tb + t = &1 /\ &0 < t /\ x = ta % a + tb % b + t % v0} /\
aff_ge {a, b} {v0} =
          {x | ?ta tb t.
                   ta + tb + t = &1 /\
                   &0 <= t /\
                   x = ta % a + tb % b + t % v0} /\
aff_lt {a,b,c} {v0} = 
   { x| ? ta tb tc t. t < &0 /\ ta + tb + tc + t = &1 /\
           x = ta % a + tb % b + tc % c + t % v0 }  /\
aff_gt {a,b,c} {v0} =  
   { x| ? ta tb tc t. &0 < t /\ ta + tb + tc + t = &1 /\
     x = ta % a + tb % b + tc % c + t % v0 } `, 
ONCE_REWRITE_TAC[SET_RULE` {a} = {a,a,a} `] THEN 
ONCE_REWRITE_TAC[SET_RULE` {a,b,b,b} = {a,b,b} `] THEN 
ONCE_REWRITE_TAC[SET_RULE` {a,b,c,c} = {a,b,c} `] THEN 
NHANH (SET_RULE` ~(a = v0) /\ ~(b = v0) /\ ~(c = v0) ==>
  {a,b,b} INTER {v0,v0,v0} = {} /\ {a,b,c} INTER {v0,v0,v0} = {} `) THEN 
SIMP_TAC[AFF_LE_LT33; AFF_GE33; AFF_GT33] THEN 
REWRITE_TAC[GSYM VECTOR_ADD_RDISTRIB; VECTOR_ARITH` a % x + b % x + y
  = ( a + b ) % x + y `] THEN 
REWRITE_TAC[REAL_ARITH` (a + b ) + c = a + b + c `] THEN 
REPEAT STRIP_TAC THENL [
REWRITE_TAC[FUN_EQ_THM; IN_ELIM_THM] THEN GEN_TAC THEN 
EQ_TAC THENL [MESON_TAC[REAL_ARITH ` &0 < a /\ &0 < b ==> &0 < a + b `;
  REAL_ARITH ` a + b + c + d = a + ( b + c ) + d `]; 
MESON_TAC[REAL_ARITH ` a + b + c = a + b / &2 + b / &2 + c / &3 +
  c / &3 + c / &3 `; REAL_ARITH` &0 < a <=> &0 < a / &3 `;
  REAL_ARITH` a = a / &2 + a / &2 /\ b = b / &3 + b / &3 + b / &3 /\ b =
 ( b / &3 + b / &3 ) + b / &3  `]];
REPEAT STRIP_TAC THEN 
REWRITE_TAC[FUN_EQ_THM; IN_ELIM_THM] THEN GEN_TAC THEN 
EQ_TAC THENL [
MESON_TAC[REAL_ARITH ` ( &0 < a /\ &0 < b ==> &0 < a + b ) /\ ( &0 <= a /\ &0 <= b ==> &0 <= a + b )  `;
  REAL_ARITH ` a + b + c + d = a + ( b + c ) + d `] ; 
MESON_TAC[REAL_ARITH ` a + b + c = a + b / &2 + b / &2 + c / &3 +
  c / &3 + c / &3 `; REAL_ARITH` ( &0 < a <=> &0 < a / &3) /\ ( &0 <= a <=> &0 <= a / &3) `;
  REAL_ARITH` a = a / &2 + a / &2 /\ b = b / &3 + b / &3 + b / &3 /\ b = ( b / &3 + b / &3 ) + b / &3  `]];
REPEAT STRIP_TAC THEN 
REWRITE_TAC[FUN_EQ_THM; IN_ELIM_THM] THEN GEN_TAC THEN 
EQ_TAC THENL [MESON_TAC[REAL_ARITH ` ( &0 < a /\ &0 < b ==> &0 < a + b ) 
/\ ( &0 <= a /\ &0 <= b ==> &0 <= a + b )  `; REAL_ARITH ` ( a < &0 /\ b < &0 
==> a + b < &0 )`; REAL_ARITH ` a + b + c + d = a + ( b + c ) + d `]; STRIP_TAC] THEN 
EXISTS_TAC `ta :real` THEN 
EXISTS_TAC `tb :real` THEN 
EXISTS_TAC `tc :real` THEN 
REPEAT (EXISTS_TAC ` t / &3 `) THEN 
ASM_MESON_TAC[REAL_ARITH` a < &0 <=> a / &3 < &0 `;
  REAL_ARITH ` a = a / &3 + a / &3 + a / &3 `];
REPEAT STRIP_TAC THEN 
REWRITE_TAC[FUN_EQ_THM; IN_ELIM_THM] THEN GEN_TAC THEN 
EQ_TAC THENL [MESON_TAC[REAL_ARITH ` ( &0 < a /\ &0 < b ==> &0 < a + b ) /\ ( &0 <= a /\ &0 <= b
 ==> &0 <= a + b )  `; REAL_ARITH ` ( a < &0 /\ b < &0 ==> a + b < &0 )`;
  REAL_ARITH ` a + b + c + d = a + ( b + c ) + d `]; STRIP_TAC] THEN 
EXISTS_TAC `ta :real` THEN 
EXISTS_TAC `tb :real` THEN 
EXISTS_TAC `tc :real` THEN 
REPEAT (EXISTS_TAC ` t / &3 `) THEN 
ASM_MESON_TAC[REAL_ARITH ` a = a / &3 + a / &3 + a / &3 `;
  REAL_ARITH ` &0 < a <=> &0 < a / &3 `]]);;

let AFF_GES_GTS = prove(` ! a b c (v0:real^N).
~(a = v0) /\ ~(b = v0) /\ ~(c = v0)
     ==> aff_gt {a, b} {v0} =
               {x | ?ta tb t.
                        ta + tb + t = &1 /\
                        &0 < t /\
                        x = ta % a + tb % b + t % v0} /\
               aff_ge {a, b} {v0} =
               {x | ?ta tb t.
                        ta + tb + t = &1 /\
                        &0 <= t /\
                        x = ta % a + tb % b + t % v0} /\
               aff_lt {a, b, c} {v0} =
               {x | ?ta tb tc t.
                        t < &0 /\
                        ta + tb + tc + t = &1 /\
                        x = ta % a + tb % b + tc % c + t % v0} /\
               aff_gt {a, b, c} {v0} =
               {x | ?ta tb tc t.
                        &0 < t /\
                        ta + tb + tc + t = &1 /\
                        x = ta % a + tb % b + tc % c + t % v0} /\
         aff_ge {a, b, c} {v0} =
         {x | ?ta tb tc t.
                  &0 <= t /\
                  ta + tb + tc + t = &1 /\
                  x = ta % a + tb % b + tc % c + t % v0} `,
REPEAT GEN_TAC THEN 
REWRITE_TAC[MESON[]` (a ==> a1 /\ a2 /\ a3 /\ a4 /\ a5) <=>
  ( a ==> a1 /\ a2 /\ a3 /\a4 ) /\ ( a ==> a5) `] THEN 
REWRITE_TAC[AFF_GES_LTS] THEN 
NHANH (SET_RULE` ~(a = v0) /\ ~(b = v0) /\ ~(c = v0) 
  ==> {a,b,c} INTER {v0,v0,v0} = {} `) THEN 
ONCE_REWRITE_TAC[SET_RULE` {v} = {v,v,v} `] THEN 
ONCE_REWRITE_TAC[SET_RULE` {a, b, c, c, c} = {a,b,c} `] THEN 
SIMP_TAC[AFF_GE33] THEN 
REPEAT STRIP_TAC THEN 
REWRITE_TAC[FUN_EQ_THM; IN_ELIM_THM; GSYM VECTOR_ADD_RDISTRIB] THEN 
GEN_TAC THEN EQ_TAC THENL [ 
MESON_TAC[REAL_ARITH` &0 <= a /\ &0 <= b ==> &0 <= a + b `]; 
STRIP_TAC THEN 
EXISTS_TAC ` ta :real` THEN 
EXISTS_TAC ` tb :real` THEN 
EXISTS_TAC ` tc :real` THEN 
REPEAT ( EXISTS_TAC ` t / &3 `) THEN 
ASM_MESON_TAC[REAL_ARITH` a = a / &3 + a / &3 + a / &3 `;
  REAL_ARITH` &0 <= a <=> &0 <= a / &3 `]]);;

 let CONV0_4 = prove
  (`conv0 {v1, v2, v3, v4} =
         {x:real^N | ?a b c d.
         &0 < a /\
         &0 < b /\
         &0 < c /\
         &0 < d /\
         a + b + c + d = &1 /\
         a % v1 + b % v2 + c % v3 + d % v4 = x}`,
   REWRITE_TAC[FUN_EQ_THM; IN_ELIM_THM] THEN X_GEN_TAC `y:real^N` THEN
   REWRITE_TAC[conv0; affsign; sgn_gt; lin_combo; UNION_EMPTY] THEN
   MATCH_MP_TAC EQ_TRANS THEN
   EXISTS_TAC
    `?f. (!w:real^N. w IN {v1, v2, v3, v4} ==> &0 < f w) /\
         sum {v1, v2, v3, v4} f = &1 /\
         vsum {v1, v2, v3, v4} (\v. f v % v) = y` THEN
   CONJ_TAC THENL [REWRITE_TAC[IN] THEN MESON_TAC[]; ALL_TAC] THEN
   SIMP_TAC[AFFINE_HULL_FINITE_STEP_GEN;
            REAL_ARITH `&0 < x /\ &0 < y ==> &0 < x + y`;
            REAL_ARITH `&0 < x ==> &0 < x / &2`;
            FINITE_INSERT; CONJUNCT1 FINITE_RULES; RIGHT_EXISTS_AND_THM] THEN
   ASM_REWRITE_TAC[IN_ELIM_THM;
                   REAL_ARITH `x - y:real = z <=> x = y + z`;
                   VECTOR_ARITH `x - y:real^N = z <=> x = y + z`] THEN
   REWRITE_TAC[VECTOR_ADD_RID; REAL_ADD_RID] THEN MESON_TAC[]);;

(* ======================= *)
(* LEMMA 81 *)
(* ======================= *)

let ARIKWRQ = prove(`! v1 v2 v3 (v4:real^3).
  let s = {v1,v2,v3,v4} in
  CARD s = 4 /\ ~ coplanar_alt s ==>
  conv s = aff_ge ( s DIFF {v1} ) {v1} INTER 
  aff_ge ( s DIFF {v2} ) {v2} INTER 
  aff_ge ( s DIFF {v3} ) {v3} INTER 
  aff_ge ( s DIFF {v4} ) {v4} `, LET_TR THEN 
SIMP_TAC[CARD4; SET_RULE ` ~(v1 IN {v2, v3, v4}) /\ ~(v2 = v3 \/ v3 = v4 \/ v4 = v2)
  ==> {v1, v2, v3, v4} DIFF {v1} = {v2,v3,v4} /\
  {v1, v2, v3, v4} DIFF {v2} = {v3,v4,v1} /\
  {v1, v2, v3, v4} DIFF {v3} = {v4,v1,v2} /\
  {v1, v2, v3, v4} DIFF {v4} = {v1,v2,v3} `] THEN 
REWRITE_TAC[CARD4; IN_SET3;DE_MORGAN_THM] THEN 
SIMP_TAC[AFF_GES_GTS] THEN 
REWRITE_TAC[CONVEX_HULL_4_EQUIV] THEN 
REPEAT STRIP_TAC THEN 
REWRITE_TAC[SET_RULE ` a = b <=> (! x. x IN a <=> x IN b ) `;
  IN_INTER; IN_ELIM_THM] THEN 
GEN_TAC THEN EQ_TAC THENL [
ASM_MESON_TAC[REAL_ARITH` a + b + c + d = d + a + b + c `;
  VECTOR_ARITH` (a:real^N) + b + c + d = d + a + b + c `];
FIRST_X_ASSUM MP_TAC ] THEN
NHANH (SPEC ` x: real^3` (GEN ` v:real^3` (SPEC_ALL COEFS_4))) THEN 
ABBREV_TAC ` aa = COEF4_1 v1 v2 v3 v4 x ` THEN 
ABBREV_TAC ` bb = COEF4_2 v1 v2 v3 v4 x ` THEN 
ABBREV_TAC ` cc = COEF4_3 v1 v2 v3 v4 x ` THEN 
ABBREV_TAC ` dd = COEF4_4 v1 v2 v3 v4 x ` THEN 
REWRITE_TAC[MESON[]` a ==> b ==> c <=> a /\ b ==> c `] THEN PHA THEN 
NHANH (MESON[REAL_ARITH` a + b + c + d = d + a + b + c `;
  VECTOR_ARITH` (a:real^N) + b + c + d = d + a + b + c `]`
aa + bb + cc + dd = &1 /\
 x = aa % v1 + bb % v2 + cc % v3 + dd % v4 /\
 (!ta tb tc td.
      x = ta % v1 + tb % v2 + tc % v3 + td % v4 /\ ta + tb + tc + td = &1
      ==> ta = aa /\ tb = bb /\ tc = cc /\ td = dd) /\
 (?ta tb tc t.
      &0 <= t /\
      ta + tb + tc + t = &1 /\
      x = ta % v2 + tb % v3 + tc % v4 + t % v1) /\
 (?ta tb tc t.
      &0 <= t /\
      ta + tb + tc + t = &1 /\
      x = ta % v3 + tb % v4 + tc % v1 + t % v2) /\
 (?ta tb tc t.
      &0 <= t /\
      ta + tb + tc + t = &1 /\
      x = ta % v4 + tb % v1 + tc % v2 + t % v3) /\
 (?ta tb tc t.
      &0 <= t /\
      ta + tb + tc + t = &1 /\
      x = ta % v1 + tb % v2 + tc % v3 + t % v4)
 ==> &0 <= aa /\ &0 <= bb /\ &0 <= cc /\ &0 <= dd`) THEN 
MATCH_MP_TAC (MESON[]` ( a1 /\ a2 /\ a3 ==> l) ==>
  aa /\ ( a1 /\ a2 /\ a4 ) /\ a3 ==> l `) THEN MESON_TAC[]);;

 let CONV0_4 = prove
  (`conv0 {v1, v2, v3, v4} =
         {x:real^N | ?a b c d.
         &0 < a /\
         &0 < b /\
         &0 < c /\
         &0 < d /\
         a + b + c + d = &1 /\
         a % v1 + b % v2 + c % v3 + d % v4 = x}`,
   REWRITE_TAC[FUN_EQ_THM; IN_ELIM_THM] THEN X_GEN_TAC `y:real^N` THEN
   REWRITE_TAC[conv0; affsign; sgn_gt; lin_combo; UNION_EMPTY] THEN
   MATCH_MP_TAC EQ_TRANS THEN
   EXISTS_TAC
    `?f. (!w:real^N. w IN {v1, v2, v3, v4} ==> &0 < f w) /\
         sum {v1, v2, v3, v4} f = &1 /\
         vsum {v1, v2, v3, v4} (\v. f v % v) = y` THEN
   CONJ_TAC THENL [REWRITE_TAC[IN] THEN MESON_TAC[]; ALL_TAC] THEN
   SIMP_TAC[AFFINE_HULL_FINITE_STEP_GEN;
            REAL_ARITH `&0 < x /\ &0 < y ==> &0 < x + y`;
            REAL_ARITH `&0 < x ==> &0 < x / &2`;
            FINITE_INSERT; CONJUNCT1 FINITE_RULES; RIGHT_EXISTS_AND_THM] THEN
   ASM_REWRITE_TAC[IN_ELIM_THM;
                   REAL_ARITH `x - y:real = z <=> x = y + z`;
                   VECTOR_ARITH `x - y:real^N = z <=> x = y + z`] THEN
   REWRITE_TAC[VECTOR_ADD_RID; REAL_ADD_RID] THEN MESON_TAC[]);;

(* APRIL WORKS *)
(* =========== *)
(* NGUYEN QUANG TRUONG *)
let IMP_TAC = IMP_IMP_TAC;;

(* LEMMA 22 *)
(* =========================== *)

let INTER_DISJONT_EX = 
SET_RULE ` ( a INTER b = {} ) <=> (! x. ~ (x IN a /\ x IN b )) `;;

(* LEMMA36 *)

(* ================== *)

MATCH_MP (SPEC_ALL AFFINE_HULL_FINITE) (MESON[FINITE_RULES] ` FINITE {(a:real^N),b,c} `) ;;

let PLANE_IMP_AFFINE = prove(`plane (p:real^N -> bool ) ==> affine p `, 
MESON_TAC[plane; AFFINE_AFFINE_HULL]);;

let PLANE_IMP_AFFINE = prove(` plane (p:real^N -> bool ) ==> affine p `,
REWRITE_TAC[plane; AFFINE_HULL_3; affine; FUN_EQ_THM; IN_ELIM_THM] THEN 
STRIP_TAC THEN ASM_SIMP_TAC[IN] THEN REPEAT STRIP_TAC THEN ASM_SIMP_TAC[] THEN 
SIMP_TAC[VECTOR_ADD_LDISTRIB; VECTOR_MUL_ASSOC] THEN 
REWRITE_TAC[VECTOR_ARITH` (( a:real^N) + b + c ) + a' + b' + c'
  = ( a + a' ) + ( b + b') + c + c' `] THEN EXISTS_TAC ` u' * u'' + v' * u''' ` THEN 
EXISTS_TAC ` (u' * v'' + v' * v''')` THEN EXISTS_TAC ` (u' * w' + v' * w'')` THEN 
ASM_SIMP_TAC[prove(` u' + v' = &1 /\
  u''' + v''' + w'' = &1 /\
  u'' + v'' + w' = &1 ==>
  (u' * u'' + v' * u''') + (u' * v'' + v' * v''') + u' * w' + v' * w'' = &1 `,
SIMP_TAC[REAL_ARITH` a + b = &1 <=> a = &1 - b `] THEN REAL_ARITH_TAC);
  GSYM VECTOR_ADD_RDISTRIB]);;

let ORTHOGONAL_CROSS_PRODUCT = prove(` u dot ( u cross v ) = &0 /\
  v dot ( u cross v ) = &0 `,
REWRITE_TAC[cross; triple_of_real3; real3_of_triple; mk_vec3] THEN
LET_TR THEN REWRITE_TAC[DOT_3; VECTOR_3] THEN REAL_ARITH_TAC);;


let PITHAGOR_NORM = prove(` a dot b = &0 ==> dist (a,b) pow 2 = norm a pow 2 +
  norm b pow 2 `,
SIMP_TAC[dist; vector_norm; DOT_POS_LE; SQRT_WORKS] THEN 
SIMP_TAC[DOT_LSUB; DOT_RSUB; DOT_SYM] THEN REAL_ARITH_TAC);;

let VEC3_EQ_EX= prove(`! a (b:real^3). a = b <=> a$1 = b$1 /\ a$2 = b$2 /\ a$3 = b$3 `,
SIMP_TAC[CART_EQ; DIMINDEX_3] THEN 
REWRITE_TAC[ARITH_RULE`1 <= i /\ i <= 3 <=>
  i = 1 \/ i = 2 \/ i = 3 `] THEN MESON_TAC[]);;

let CROSS_CONVERT = prove_by_refinement(
`  (b - a) cross (c - d) =  (a - b) cross (d - c )`,
  (* {{{ proof *)
  [
  (REWRITE_TAC[cross; triple_of_real3; real3_of_triple; mk_vec3]);
  (LET_TR);
  (REWRITE_TAC[lemma_cm3 ]);
  (REWRITE_TAC[VEC3_EQ_EX]);
  (REWRITE_TAC[VEC3_EQ_EX; VECTOR_3]);
  BY((REAL_ARITH_TAC))
  ]);;
  (* }}} *)

let lemma1 = MESON[prove(` dist(b,c) pow 2 = (a - c - (a - b)) dot (a - c - (a - b)) `,
			 SIMP_TAC[dist; vector_norm; DOT_POS_LE; SQRT_WORKS] THEN 
			   MESON_TAC[VECTOR_ARITH
		` b - (c:real^N) = (a - c) - ( a - b) `])]`
  ups_x  aa bb (dist (b,c) pow 2 ) = 
  ups_x aa bb (( a - c - (a - b)) dot (a - c - (a - b))) `;;

let NORM_CROSS_PRODUCT_UPS_X  = prove_by_refinement(
  `&4 * norm ( (b - a) cross (c - a)) pow 2 =
    ups_x (dist (a,b) pow 2) (dist (a,c) pow 2) (dist (b,c) pow 2)`,
  (* {{{ proof *)
  [
  (REWRITE_TAC[lemma1 ]);
  (ONCE_REWRITE_TAC[CROSS_CONVERT]);
  (SIMP_TAC[ups_x;DIST_SYM; dist; vector_norm; DOT_POS_LE; SQRT_WORKS]);
  (REWRITE_TAC[cross; triple_of_real3; real3_of_triple; mk_vec3]);
  (LET_TR);
  (REWRITE_TAC[DOT_3; VECTOR_3]);
  (ABBREV_TAC ` ab = a - (b:real^3) `);
  (ABBREV_TAC ` cc = a - (c:real^3) `);
  BY((REWRITE_TAC[lemma_cm3 ] THEN REAL_ARITH_TAC))
  ]);;
  (* }}} *)

let lemma1 = prove(
  ` dist (  a cross b, a ) pow 2  = norm ( a cross b) pow 2 +   
    norm a pow 2 /\dist (  a cross b, b ) pow 2  = norm ( a cross b) pow 2 +   
    norm b pow 2 `, 
  SIMP_TAC[DOT_SYM;ORTHOGONAL_CROSS_PRODUCT ; PITHAGOR_NORM; DIST_SYM]
);;

let DET_VEC3_AS_CROSS_DOT = prove_by_refinement(
` det_vec3 v1 v2 v3 = (  v1 cross v2 ) dot v3 `,
  (* {{{ proof *)
  [
  (REWRITE_TAC[det_vec3; cross; triple_of_real3; real3_of_triple; mk_vec3; DOT_3; VECTOR_3]);
  (LET_TR);
  (REWRITE_TAC[det_vec3; cross; triple_of_real3; real3_of_triple; mk_vec3; DOT_3; VECTOR_3]);
  BY((REAL_ARITH_TAC))
  ]);;
  (* }}} *)

let COL_EQ_NORM_CROSS = prove_by_refinement(
` ! v1 v2 (v3:real^3). collinear {v1,v2,v3} <=>
 norm ( (v2 - v1) cross (v3 - v1)) pow 2 = &0 `,
  (* {{{ proof *)
  [
  (REWRITE_TAC[COL_EQ_UPS_0]);
  (REWRITE_TAC[GSYM NORM_CROSS_PRODUCT_UPS_X]);
  BY((REAL_ARITH_TAC))
  ]);;
  (* }}} *)

let COLLINEAR3_IMP_COPLANAR = prove(` ! v1 v2 v3 (v:real^3). collinear {v1,v2,v3} ==>
coplanar_alt {v1,v2,v3,v} `,
REWRITE_TAC[COPLANAR_DET_VEC3_EQ_0; COL_EQ_NORM_CROSS; DET_VEC3_AS_CROSS_DOT ] THEN 
REWRITE_TAC[GSYM RELATE_POW2; NORM_EQ_0] THEN REPEAT GEN_TAC THEN 
SIMP_TAC[VECTOR_ARITH ` vec 0 dot x = &0 `]);;

(* MAY WORKS, LEMMA 85 ; VBVYGGT *)

let POS_EQ_NOT_COPLANANR = prove(` &0 <   delta (dist ((x1:real^3),x2) pow 2) (dist (x1,x3) pow 2)
           (dist (x1,x4) pow 2)
           (dist (x2,x3) pow 2)
           (dist (x2,x4) pow 2)
           (dist (x3,x4) pow 2) <=> ~coplanar_alt {x1, x2, x3, x4} `,
MP_TAC (DELTA_POS_4POINTS) THEN MP_TAC POLFLZY THEN LET_TR THEN 
REWRITE_TAC[REAL_ARITH` a <= b <=> a = b \/ a < b `] THEN 
MESON_TAC[REAL_ARITH` ~( a = b /\ a < b ) `]);;

let SUM_CHI_EQ_2DELTA = prove(` let chi11 = chi x12 x13 x14 x23 x24 x34 in
 let chi22 = chi x12 x24 x23 x14 x13 x34 in
 let chi33 = chi x34 x13 x23 x14 x24 x12 in
 let chi44 = chi x34 x24 x14 x23 x13 x12 in
 &2 * delta x12 x13 x14 x23 x24 x34 = chi11 + chi22 + chi33 + chi44`, LET_TR THEN 
REWRITE_TAC[chi; delta] THEN REAL_ARITH_TAC);;

let NOT_0_IMP_SUM_CHI_1 = prove(`~(delta x12 x13 x14 x23 x24 x34 = &0)
 ==> chi x12 x13 x14 x23 x24 x34 / (&2 * delta x12 x13 x14 x23 x24 x34) +
     chi x12 x24 x23 x14 x13 x34 / (&2 * delta x12 x13 x14 x23 x24 x34) +
     chi x34 x13 x23 x14 x24 x12 / (&2 * delta x12 x13 x14 x23 x24 x34) +
     chi x34 x24 x14 x23 x13 x12 / (&2 * delta x12 x13 x14 x23 x24 x34) =
     &1`, MP_TAC SUM_CHI_EQ_2DELTA THEN 
LET_TR THEN CONV_TAC REAL_FIELD);;

(* MAY WORKS *)

let PROVE_DIST_FROM_V1 = prove(` ~coplanar_alt {v1, v2, v3, v4} ==>
let x12 = dist (v1,v2) pow 2 in
 let x13 = dist (v1,v3) pow 2 in
 let x14 = dist (v1,v4) pow 2 in
 let x23 = dist (v2,v3) pow 2 in
 let x24 = dist (v2,v4) pow 2 in
 let x34 = dist (v3,v4) pow 2 in
 let chi11 = chi x12 x13 x14 x23 x24 x34 in
 let chi22 = chi x12 x24 x23 x14 x13 x34 in
 let chi33 = chi x34 x13 x23 x14 x24 x12 in
 let chi44 = chi x34 x24 x14 x23 x13 x12 in
 p =
 &1 / (&2 * delta x12 x13 x14 x23 x24 x34) %
 (chi11 % v1 + chi22 % v2 + chi33 % v3 + chi44 % v4)
 ==> dist3 p v1 pow 2 =
    ( &1 / &2 ) * rho_ij' x12 x13 x14 x23 x24 x34 / (&2 * delta x12 x13 x14 x23 x24 x34) `,
REWRITE_TAC[ GSYM POS_EQ_NOT_COPLANANR] THEN 
NHANH (REAL_ARITH` a < b ==> ~( b = a ) `) THEN 
NHANH NOT_0_IMP_SUM_CHI_1  THEN 
LET_TR THEN REWRITE_TAC[VECTOR_ADD_LDISTRIB; VECTOR_MUL_ASSOC;
  REAL_ARITH` ( &1 / a ) * b = b / a `] THEN 
ABBREV_TAC ` a1 = chi (dist (v1,v2) pow 2) (dist (v1,v3) pow 2) (dist (v1,v4) pow 2)
     (dist (v2,v3) pow 2)
     (dist (v2,v4) pow 2)
     (dist (v3,v4) pow 2) /
     (&2 *
      delta (dist (v1,v2) pow 2) (dist (v1,v3) pow 2) (dist (v1,v4) pow 2)
      (dist (v2,v3) pow 2)
      (dist (v2,v4) pow 2)
      (dist (v3,(v4:real^3)) pow 2))` THEN 
ABBREV_TAC ` a2 = chi (dist (v1,v2) pow 2) (dist (v2,v4) pow 2) (dist (v2,v3) pow 2)
     (dist (v1,v4) pow 2)
     (dist (v1,v3) pow 2)
     (dist (v3,v4) pow 2) /
     (&2 *
      delta (dist (v1,v2) pow 2) (dist (v1,v3) pow 2) (dist (v1,v4) pow 2)
      (dist (v2,v3) pow 2)
      (dist (v2,v4) pow 2)
      (dist (v3,(v4:real^3)) pow 2)) ` THEN 
REWRITE_TAC[ GSYM dist3] THEN 
ABBREV_TAC ` a3 = chi (dist3 v3 v4 pow 2) (dist3 v1 v3 pow 2) (dist3 v2 v3 pow 2) (dist3 v1 v4 pow 2)
     (dist3 v2 v4 pow 2)
     (dist3 v1 v2 pow 2) /
     (&2 *
      delta (dist3 v1 v2 pow 2) (dist3 v1 v3 pow 2) (dist3 v1 v4 pow 2)
      (dist3 v2 v3 pow 2)
      (dist3 v2 v4 pow 2)
      (dist3 v3 v4 pow 2)) ` THEN 
ABBREV_TAC ` a4 = chi (dist3 v3 v4 pow 2) (dist3 v2 v4 pow 2) (dist3 v1 v4 pow 2) (dist3 v2 v3 pow 2)
     (dist3 v1 v3 pow 2)
     (dist3 v1 v2 pow 2) /
     (&2 *
      delta (dist3 v1 v2 pow 2) (dist3 v1 v3 pow 2) (dist3 v1 v4 pow 2)
      (dist3 v2 v3 pow 2)
      (dist3 v2 v4 pow 2)
      (dist3 v3 v4 pow 2)) ` THEN 
SIMP_TAC[REAL_ARITH` a + b = &1 <=> a = &1 - b `] THEN 
REPEAT STRIP_TAC THEN 
REWRITE_TAC[dist3; dist; NORM_POW_2; VECTOR_ARITH` 
  (((&1 - (a2 + a3 + a4)) % v1 + a2 % v2 + a3 % v3 + a4 % v4) - v1) =
  a2 % ( v2 - v1 ) + a3 % (v3 - v1 ) + a4 % ( v4 - v1 ) `;
  VECTOR_ARITH` ( a + b ) dot ( a + b ) = a dot a + &2 * ( a dot b )
  + b dot b `] THEN 
REWRITE_TAC[DOT_RADD; DOT_LMUL; DOT_RMUL] THEN 
REWRITE_TAC[X_DOT_X_EQ] THEN 
REWRITE_TAC[DOT_NORM_SUB; VECTOR_ARITH` v2 - v1 - (v4 - v1)
  = (v2:real^N) - v4 `] THEN 
SIMP_TAC[GSYM dist; DIST_SYM; GSYM dist3; D3_SYM] THEN 
EXPAND_TAC "a2" THEN 
EXPAND_TAC "a3" THEN 
EXPAND_TAC "a4" THEN 
REWRITE_TAC[GSYM dist3 ] THEN 
ABBREV_TAC ` x12 = dist3 v1 v2 pow 2 ` THEN 
ABBREV_TAC ` x13 = dist3 v1 v3 pow 2 ` THEN 
ABBREV_TAC ` x14 = dist3 v1 v4 pow 2 ` THEN 
ABBREV_TAC ` x23 = dist3 v2 v3 pow 2 ` THEN 
ABBREV_TAC ` x24 = dist3 v2 v4 pow 2 ` THEN 
ABBREV_TAC ` x34 = dist3 v3 v4 pow 2 ` THEN 
UNDISCH_TAC ` &0 < delta x12 x13 x14 x23 x24 x34 ` THEN 
ONCE_REWRITE_TAC[REAL_FIELD` &0 < a ==> b = c <=> &0 < a
 ==> b * ( &2 * a) pow 2 = c * ( &2 * a ) pow 2 `] THEN 
ONCE_REWRITE_TAC[REAL_ARITH` &0 < a <=> &0 < &2 * a `] THEN 
SIMP_TAC[REAL_FIELD` &0 < b ==> ( a / b ) * b pow 2 = a * b `;
  REAL_RDISTRIB; REAL_FIELD` &0 < b ==> ( a / b ) * ( aa / b ) * c * 
b pow 2 = a * aa * c `; REAL_ADD_LDISTRIB] THEN 
SIMP_TAC[REAL_LDISTRIB; REAL_ARITH` (a*b)*c = a *b * c `;
  REAL_FIELD` &0 < b ==> ( a / b ) * ( a / b ) * c * b pow 2 = a pow 2 * c `;
  REAL_ARITH` &2 * a * b * c / &2 * d = a * b * d * c `] THEN 
SIMP_TAC[REAL_FIELD` &0 < a ==> ( b / a ) * ( bb / a ) * a pow 2 
  * d = b * bb * d `] THEN 
SIMP_TAC[REAL_FIELD` &0 < a ==> b / a / &2 * a pow 2 =
  a * b / &2 `] THEN 
REWRITE_TAC[chi; rho_ij'; delta] THEN 
REAL_ARITH_TAC);;

let PROVE_EQ_DIST_FROM4 = prove(` ~coplanar_alt {v1, v2, v3, v4} ==>
let x12 = dist (v1,v2) pow 2 in
 let x13 = dist (v1,v3) pow 2 in
 let x14 = dist (v1,v4) pow 2 in
 let x23 = dist (v2,v3) pow 2 in
 let x24 = dist (v2,v4) pow 2 in
 let x34 = dist (v3,v4) pow 2 in
 let chi11 = chi x12 x13 x14 x23 x24 x34 in
 let chi22 = chi x12 x24 x23 x14 x13 x34 in
 let chi33 = chi x34 x13 x23 x14 x24 x12 in
 let chi44 = chi x34 x24 x14 x23 x13 x12 in
 p =
 &1 / (&2 * delta x12 x13 x14 x23 x24 x34) %
 (chi11 % v1 + chi22 % v2 + chi33 % v3 + chi44 % v4)
==>
dist3 p v2 pow 2 = ( &1 / &2 ) * rho_ij' x12 x13 x14 x23 x24 x34 / (&2 * delta x12 x13 x14 x23 x24 x34) /\
dist3 p v3 pow 2 = ( &1 / &2 ) * rho_ij' x12 x13 x14 x23 x24 x34 / (&2 * delta x12 x13 x14 x23 x24 x34) /\
dist3 p v4 pow 2 =
 ( &1 / &2 ) * rho_ij' x12 x13 x14 x23 x24 x34 / (&2 * delta x12 x13 x14 x23 x24 x34)  `,
REWRITE_TAC[ GSYM POS_EQ_NOT_COPLANANR] THEN 
NHANH (REAL_ARITH` a < b ==> ~( b = a ) `) THEN 
NHANH NOT_0_IMP_SUM_CHI_1  THEN 
LET_TR THEN REWRITE_TAC[VECTOR_ADD_LDISTRIB; VECTOR_MUL_ASSOC;
  REAL_ARITH` ( &1 / a ) * b = b / a `] THEN 
ABBREV_TAC ` a1 = chi (dist (v1,v2) pow 2) (dist (v1,v3) pow 2) (dist (v1,v4) pow 2)
     (dist (v2,v3) pow 2)
     (dist (v2,v4) pow 2)
     (dist (v3,v4) pow 2) /
     (&2 *
      delta (dist (v1,v2) pow 2) (dist (v1,v3) pow 2) (dist (v1,v4) pow 2)
      (dist (v2,v3) pow 2)
      (dist (v2,v4) pow 2)
      (dist (v3,(v4:real^3)) pow 2))` THEN 
ABBREV_TAC ` a2 = chi (dist (v1,v2) pow 2) (dist (v2,v4) pow 2) (dist (v2,v3) pow 2)
     (dist (v1,v4) pow 2)
     (dist (v1,v3) pow 2)
     (dist (v3,v4) pow 2) /
     (&2 *
      delta (dist (v1,v2) pow 2) (dist (v1,v3) pow 2) (dist (v1,v4) pow 2)
      (dist (v2,v3) pow 2)
      (dist (v2,v4) pow 2)
      (dist (v3,(v4:real^3)) pow 2)) ` THEN 
REWRITE_TAC[ GSYM dist3] THEN 
ABBREV_TAC ` a3 = chi (dist3 v3 v4 pow 2) (dist3 v1 v3 pow 2) (dist3 v2 v3 pow 2) (dist3 v1 v4 pow 2)
     (dist3 v2 v4 pow 2)
     (dist3 v1 v2 pow 2) /
     (&2 *
      delta (dist3 v1 v2 pow 2) (dist3 v1 v3 pow 2) (dist3 v1 v4 pow 2)
      (dist3 v2 v3 pow 2)
      (dist3 v2 v4 pow 2)
      (dist3 v3 v4 pow 2)) ` THEN 
ABBREV_TAC ` a4 = chi (dist3 v3 v4 pow 2) (dist3 v2 v4 pow 2) (dist3 v1 v4 pow 2) (dist3 v2 v3 pow 2)
     (dist3 v1 v3 pow 2)
     (dist3 v1 v2 pow 2) /
     (&2 *
      delta (dist3 v1 v2 pow 2) (dist3 v1 v3 pow 2) (dist3 v1 v4 pow 2)
      (dist3 v2 v3 pow 2)
      (dist3 v2 v4 pow 2)
      (dist3 v3 v4 pow 2)) ` THEN 
ONCE_REWRITE_TAC[MESON[VECTOR_ARITH` &1 % x = x `]` dist3 a b pow 2 =
  aa <=> dist3 a ( &1 % b ) pow 2 = aa `] THEN 
ONCE_REWRITE_TAC[MESON[]` a = &1 <=> &1 = a `] THEN 
SIMP_TAC[] THEN 
STRIP_TAC THEN STRIP_TAC THEN 
REWRITE_TAC[dist3; dist] THEN 
REWRITE_TAC[VECTOR_ARITH` (a1 % v1 + a2 % v2 + a3 % v3 + a4 % v4) - (a1 + a2 + a3 + a4) % v2
  = a1 % ( v1 - v2 ) + a3 % ( v3 - v2 ) + a4 % (v4 - v2 ) `;
  VECTOR_ARITH` (a1 % v1 + a2 % v2 + a3 % v3 + a4 % v4) - (a1 + a2 + a3 + a4) % v3
  = a1 % ( v1 - v3 ) + a2 % ( v2 - v3 ) + a4 % (v4 - v3 )`;
  VECTOR_ARITH` (a1 % v1 + a2 % v2 + a3 % v3 + a4 % v4) - (a1 + a2 + a3 + a4) % v4 =
  a1 % ( v1 - v4 ) + a2 % ( v2 - v4 ) + a3 % (v3 - v4 )`] THEN 
REWRITE_TAC[NORM_POW_2] THEN 
REWRITE_TAC[DOT_LADD; DOT_RADD; DOT_LMUL; DOT_RMUL; GSYM NORM_POW_2] THEN 
REWRITE_TAC[DOT_NORM_SUB; VECTOR_ARITH` v3 - v4 - (v2 - v4) =
  (v3:real^N) - v2 `; GSYM dist; GSYM dist3 ] THEN 
EXPAND_TAC "a1" THEN 
EXPAND_TAC "a2" THEN 
EXPAND_TAC "a3" THEN 
EXPAND_TAC "a4" THEN 
REWRITE_TAC[GSYM dist3 ] THEN 
REWRITE_TAC[prove(` dist3 (v4 - v3) (v1 - v3) = dist3 v1 v4 `, 
REWRITE_TAC[dist3] THEN CONV_TAC NORM_ARITH)] THEN 
SIMP_TAC[D3_SYM] THEN 
ABBREV_TAC ` x12 = dist3 v1 v2 pow 2 ` THEN 
ABBREV_TAC ` x13 = dist3 v1 v3 pow 2 ` THEN 
ABBREV_TAC ` x14 = dist3 v1 v4 pow 2 ` THEN 
ABBREV_TAC ` x23 = dist3 v2 v3 pow 2 ` THEN 
ABBREV_TAC ` x24 = dist3 v2 v4 pow 2 ` THEN 
ABBREV_TAC ` x34 = dist3 v3 v4 pow 2 ` THEN 
UNDISCH_TAC ` &0 < delta x12 x13 x14 x23 x24 x34 ` THEN 
ONCE_REWRITE_TAC[REAL_FIELD` &0 < a ==> ( b = c ) /\ ( bb = cc ) /\ ( bbb = ccc ) 
<=> &0 < a
 ==> ( b * ( &2 * a) pow 2 = c * ( &2 * a ) pow 2 ) /\
( bb * ( &2 * a) pow 2 = cc * ( &2 * a ) pow 2 ) /\
( bbb * ( &2 * a) pow 2 = ccc * ( &2 * a ) pow 2 ) `] THEN 
ONCE_REWRITE_TAC[REAL_ARITH` &0 < a <=> &0 < &2 * a `] THEN 
SIMP_TAC[REAL_FIELD` &0 < b ==> ( a / b ) * b pow 2 = a * b `;
  REAL_RDISTRIB; REAL_FIELD` &0 < b ==> ( a / b ) * ( aa / b ) * c * 
b pow 2 = a * aa * c `; REAL_ADD_LDISTRIB] THEN 
SIMP_TAC[REAL_LDISTRIB; REAL_ARITH` (a*b)*c = a *b * c `;
  REAL_FIELD` &0 < b ==> ( a / b ) * ( a / b ) * c * b pow 2 = a pow 2 * c `;
  REAL_ARITH` &2 * a * b * c / &2 * d = a * b * d * c `] THEN 
SIMP_TAC[REAL_FIELD` &0 < a ==> ( b / a ) * ( bb / a ) * a pow 2 
  * d = b * bb * d `] THEN 
SIMP_TAC[REAL_FIELD` &0 < a ==> b / a / &2 * a pow 2 =
  a * b / &2 `] THEN SIMP_TAC[REAL_FIELD` &0 < b ==> ( a / b ) * b pow 2 = a * b `;
  REAL_RDISTRIB; REAL_FIELD` &0 < b ==> ( a / b ) * ( aa / b ) * c * 
b pow 2 = a * aa * c `; REAL_ADD_LDISTRIB] THEN 
SIMP_TAC[REAL_LDISTRIB; REAL_ARITH` (a*b)*c = a *b * c `;
  REAL_FIELD` &0 < b ==> ( a / b ) * ( a / b ) * c * b pow 2 = a pow 2 * c `;
  REAL_ARITH` &2 * a * b * c / &2 * d = a * b * d * c `] THEN 
SIMP_TAC[REAL_FIELD` &0 < a ==> ( b / a ) * ( bb / a ) * a pow 2 
  * d = b * bb * d `] THEN 
SIMP_TAC[REAL_FIELD` &0 < a ==> b / a / &2 * a pow 2 =
  a * b / &2 `] THEN 
DISCH_TAC THEN REWRITE_TAC[chi; rho_ij'; delta] THEN 
REAL_ARITH_TAC);;

let AFFINE_HULL_3 = prove
 (`affine hull {a,b,c} =
    { u % a + v % b + w % c | u + v + w = &1}`,
  SIMP_TAC[AFFINE_HULL_FINITE; FINITE_INSERT; FINITE_RULES] THEN
  SIMP_TAC[AFFINE_HULL_FINITE_STEP; FINITE_INSERT; FINITE_RULES] THEN
  REWRITE_TAC[REAL_ARITH `x - y = z:real <=> x = y + z`;
              VECTOR_ARITH `x - y = z:real^N <=> x = y + z`] THEN
  REWRITE_TAC[VECTOR_ADD_RID; REAL_ADD_RID] THEN SET_TAC[]);;

let AFFINE_HULL_4 = prove
 (`affine hull {a,b,c,d} =
    { u % a + v % b + w % c + z % d | u + v + w + z = &1}`,
  SIMP_TAC[AFFINE_HULL_FINITE; FINITE_INSERT; FINITE_RULES] THEN
  SIMP_TAC[AFFINE_HULL_FINITE_STEP; FINITE_INSERT; FINITE_RULES] THEN
  REWRITE_TAC[REAL_ARITH `x - y = z:real <=> x = y + z`;
              VECTOR_ARITH `x - y = z:real^N <=> x = y + z`] THEN
  REWRITE_TAC[VECTOR_ADD_RID; REAL_ADD_RID] THEN SET_TAC[]);;

let PROVE_EXISTS_CIR_OF_FOUR_POINTS = prove(`!(v1:real^3) v2 v3 v4.
         CARD {v1, v2, v3, v4} = 4 /\ ~coplanar_alt {v1, v2, v3, v4}
         ==> (? p. p IN affine hull {v1, v2, v3, v4} /\
             (?r. !v. v IN {v1, v2, v3, v4}
                      ==> r = dist (p, v))) `,
NHANH (REWRITE_RULE[RIGHT_FORALL_IMP_THM]  (GEN `p:real^3` PROVE_DIST_FROM_V1)) THEN 
NHANH (REWRITE_RULE[RIGHT_FORALL_IMP_THM]  (GEN `p:real^3` PROVE_EQ_DIST_FROM4 )) THEN 
REPEAT GEN_TAC THEN REPEAT LET_TAC THEN ABBREV_TAC `rr = &1 / &2 *
       rho_ij' x12 x13 x14 x23 x24 x34 / (&2 * delta x12 x13 x14 x23 x24 x34) ` THEN 
REWRITE_TAC[GSYM POS_EQ_NOT_COPLANANR] THEN 
NHANH (SPEC_ALL REAL_LT_IMP_NZ) THEN ASM_SIMP_TAC[] THEN 
NHANH (NOT_0_IMP_SUM_CHI_1 ) THEN ASM_SIMP_TAC[] THEN 
REWRITE_TAC[VECTOR_ADD_LDISTRIB; VECTOR_MUL_ASSOC;
  REAL_ARITH ` &1 / a * b = b / a `] THEN 
REWRITE_TAC[FORALL_IN_CLAUSES; MESON[]`(? r. (r:real) = a /\
  r = b /\ r = c /\ r = d ) <=> a = b /\ a = c /\ a = d `] THEN 
REWRITE_TAC[MESON[]` (! x. x = a ==> P a ) <=> P a `] THEN DISCH_TAC THEN 
EXISTS_TAC ` chi11 / (&2 * delta x12 x13 x14 x23 x24 x34) % (v1:real^3) +
      chi22 / (&2 * delta x12 x13 x14 x23 x24 x34) % v2 +
      chi33 / (&2 * delta x12 x13 x14 x23 x24 x34) % v3 +
      chi44 / (&2 * delta x12 x13 x14 x23 x24 x34) % v4 ` THEN 
CONJ_TAC THENL [REWRITE_TAC[AFFINE_HULL_4; IN_ELIM_THM] THEN 
FIRST_X_ASSUM MP_TAC THEN MESON_TAC[NOT_0_IMP_SUM_CHI_1 ]; 
FIRST_X_ASSUM MP_TAC THEN SIMP_TAC[dist3; DIST_POS_LE; EQ_POW2_COND]]);;

let IMP_PROPERTIES_OF_CIR4 = prove(`!(v1:real^3) v2 v3 v4.
         CARD {v1, v2, v3, v4} = 4 /\ ~coplanar_alt {v1, v2, v3, v4}
         ==> circumcenter {v1, v2, v3, v4} IN affine hull {v1, v2, v3, v4} /\
             (?r. !v. v IN {v1, v2, v3, v4}
                      ==> r = dist (circumcenter {v1, v2, v3, v4},v))`,
NHANH (SPEC_ALL PROVE_EXISTS_CIR_OF_FOUR_POINTS ) THEN REWRITE_TAC[circumcenter; IN]
THEN MESON_TAC[EXISTS_THM]);;

let IMP_OTHO4 = prove(` n dot (v2 - v1) = &0 /\
  n dot (v3 - v1) = &0 /\
  n dot (v4 - v1) = &0 /\
  x IN affine hull {v1,v2,v3,v4} /\
  y IN affine hull {v1,v2,v3,v4} ==>
  n dot (x - y ) = &0 `,
REWRITE_TAC[AFFINE_HULL_4; IN_ELIM_THM] THEN STRIP_TAC THEN 
DOWN_TAC THEN IMP_TAC THEN SIMP_TAC[REAL_ARITH`a + b = c <=> a = c - b `] THEN 
PHA THEN REWRITE_TAC[VECTOR_ARITH` ((&1 - (v' + w' + z')) % v1 + v' % v2 +
 w' % v3 + z' % v4) - ((&1 - (v + w + z)) % v1 + v % v2 + w % v3 + z % v4)  =
  ( v' - v ) % ( v2 - v1 ) + ( w' - w ) % ( v3 - v1 ) +
  ( z' - z ) % ( v4 - v1 ) `] THEN 
SIMP_TAC[DOT_RADD; DOT_RMUL; ZERO_NEUTRAL]);;

let DIST_EQ_IMP_ORTHOGONAL = prove(` dist (pp,v2) = dist (pp,v1) /\
  dist (p,v2) = dist (p,v1) ==>
  (pp - p ) dot (v2 - v1 ) = &0 `,
REWRITE_TAC[MONG7_ROI; DOT_LSUB] THEN REAL_ARITH_TAC);;

let UNIQUE_EXISISTING_PROPERTY_C4 = prove(`!(v1:real^3) v2 v3 v4.
         CARD {v1, v2, v3, v4} = 4 /\ ~coplanar_alt {v1, v2, v3, v4}
         ==>   (!p. p IN affine hull {v1, v2, v3, v4} /\
                  (?r. !v. v IN {v1, v2, v3, v4} ==> r = dist (p,v))
                  ==> p = circumcenter {v1, v2, v3, v4}) `,
NHANH (SPEC_ALL IMP_PROPERTIES_OF_CIR4 ) THEN 
REPEAT GEN_TAC THEN 
ABBREV_TAC ` pp = circumcenter {(v1:real^3), v2, v3, v4}` THEN 
REPEAT STRIP_TAC THEN 
DOWN_TAC THEN 
REWRITE_TAC[FORALL_IN_CLAUSES] THEN 
REWRITE_TAC[MESON[]` r = a /\ r = b /\ r = c /\ r = d <=> r = a /\ b = a /\ c = a 
  /\ d = a `] THEN 
PHA THEN 
NHANH (MESON[DIST_EQ_IMP_ORTHOGONAL ]`dist (pp,v2) = dist (pp,v1) /\
 dist (pp,v3) = dist (pp,v1) /\
 dist (pp,v4) = dist (pp,v1) /\a11/\a2/\
 dist (p,v2) = dist (p,v1) /\
 dist (p,v3) = dist (p,v1) /\
 dist (p,v4) = dist (p,v1) ==>
  ( p - pp) dot ( v2 - v1 ) = &0 /\
  ( p - pp ) dot ( v3 - v1 ) = &0 /\
  ( p - pp ) dot ( v4 - v1 ) = &0 `) THEN 
ONCE_REWRITE_TAC[GSYM VECTOR_SUB_EQ] THEN 
REWRITE_TAC[GSYM DOT_EQ_0] THEN MESON_TAC[IMP_OTHO4 ]);;

let PROVE_IN_AFFINE_HULL_4 = prove(
`~(delta x12 x13 x14 x23 x24 x34 = &0)
 ==> &1 / (&2 * delta x12 x13 x14 x23 x24 x34) %
     (chi x12 x13 x14 x23 x24 x34 % v1 +
      chi x12 x24 x23 x14 x13 x34 % v2 +
      chi x34 x13 x23 x14 x24 x12 % v3 +
      chi x34 x24 x14 x23 x13 x12 % v4) IN
     affine hull {(v1:real^3), v2, v3, v4}`,
REWRITE_TAC[AFFINE_HULL_4; IN_ELIM_THM; VECTOR_ADD_LDISTRIB;
  VECTOR_MUL_ASSOC; REAL_ARITH ` ( &1 / a ) * b = b/a `]
 THEN MESON_TAC[NOT_0_IMP_SUM_CHI_1]);;

(* VBVYGGT , le 85 *)

MESON[POW_2_SQRT; DIST_POS_LE]` dist (x,y) pow 2 = r ==> dist (x,y) = sqrt ( r ) `;;

(* LEMMA 85 *)
let VBVYGGT = prove(`!(v1:real^3) v2 v3 v4.
         CARD {v1, v2, v3, v4} = 4 /\ ~coplanar_alt {v1, v2, v3, v4}
         ==> circumcenter {v1, v2, v3, v4} IN affine hull {v1, v2, v3, v4} /\
             (?r. !v. v IN {v1, v2, v3, v4}
                      ==> r = dist (circumcenter {v1, v2, v3, v4},v)) /\
             (!p. p IN affine hull {v1, v2, v3, v4} /\
                  (?r. !v. v IN {v1, v2, v3, v4} ==> r = dist (p,v))
                  ==> p = circumcenter {v1, v2, v3, v4}) /\
             (let x12 = dist (v1,v2) pow 2 in
              let x13 = dist (v1,v3) pow 2 in
              let x14 = dist (v1,v4) pow 2 in
              let x23 = dist (v2,v3) pow 2 in
              let x24 = dist (v2,v4) pow 2 in
              let x34 = dist (v3,v4) pow 2 in
              let chi11 = chi x12 x13 x14 x23 x24 x34 in
              let chi22 = chi x12 x24 x23 x14 x13 x34 in
              let chi33 = chi x34 x13 x23 x14 x24 x12 in
              let chi44 = chi x34 x24 x14 x23 x13 x12 in
              circumcenter {v1, v2, v3, v4} =
              &1 / (&2 * delta x12 x13 x14 x23 x24 x34) %
              (chi11 % v1 + chi22 % v2 + chi33 % v3 + chi44 % v4)) `,
NHANH (SPEC_ALL UNIQUE_EXISISTING_PROPERTY_C4 ) THEN 
NHANH (SPEC_ALL IMP_PROPERTIES_OF_CIR4 ) THEN 
REWRITE_TAC[MESON[]` (a /\ b1/\b2) /\ b ==> b1 /\b2/\ b/\ d <=> a /\ b1 /\b2/\b==>d `] THEN 
NHANH (REWRITE_RULE[RIGHT_FORALL_IMP_THM] ( GEN `p: real^3 `PROVE_DIST_FROM_V1)) THEN 
NHANH (REWRITE_RULE[RIGHT_FORALL_IMP_THM] ( GEN `p: real^3 ` PROVE_EQ_DIST_FROM4)) THEN 
REPEAT GEN_TAC THEN REPEAT LET_TAC THEN ABBREV_TAC `rr = &1 / &2 *
       rho_ij' x12 x13 x14 x23 x24 x34 / (&2 * delta x12 x13 x14 x23 x24 x34) ` THEN 
REWRITE_TAC[MESON[]` (! x. x = a ==> P x ) <=> P a `] THEN 
REWRITE_TAC[GSYM POS_EQ_NOT_COPLANANR] THEN 
NHANH (REAL_ARITH` &0 < a ==> ~( a = &0 )`) THEN 
NHANH (PROVE_IN_AFFINE_HULL_4 ) THEN 
UNDISCH_TAC ` dist ((v1:real^3),v2) pow 2 = x12` THEN 
UNDISCH_TAC ` dist ((v1:real^3),v3) pow 2 = x13` THEN 
UNDISCH_TAC ` dist ((v1:real^3),v4) pow 2 = x14` THEN 
UNDISCH_TAC ` dist ((v2:real^3),v3) pow 2 = x23` THEN 
UNDISCH_TAC ` dist ((v2:real^3),v4) pow 2 = x24` THEN 
UNDISCH_TAC ` dist ((v3:real^3),v4) pow 2 = x34` THEN 
UNDISCH_TAC ` chi x12 x13 x14 x23 x24 x34 = chi11 ` THEN 
UNDISCH_TAC ` chi x12 x24 x23 x14 x13 x34 = chi22 ` THEN 
UNDISCH_TAC ` chi x34 x13 x23 x14 x24 x12 = chi33` THEN 
UNDISCH_TAC ` chi x34 x24 x14 x23 x13 x12 = chi44` THEN 
REWRITE_TAC[MESON[]` a = b ==> P a <=> a = b ==> P b `] THEN 
ABBREV_TAC ` w =  &1 / (&2 * delta x12 x13 x14 x23 x24 x34) %
     (chi11 % (v1:real^3) + chi22 % v2 + chi33 % v3 + chi44 % v4)` THEN 
REWRITE_TAC[MESON[]` a /\ b ==> c <=> a ==> b ==> c `]
THEN REPLICATE_TAC 13 DISCH_TAC THEN 
REWRITE_TAC[FORALL_IN_CLAUSES;dist3] THEN PHA THEN 
NHANH (MESON[POW_2_SQRT; DIST_POS_LE]` dist (x,y) pow 2 = r
 ==> dist (x,y) = sqrt ( r ) `) THEN MESON_TAC[]);;

let NOT_COPLANAR_IMP_EXISTS_CIR = prove(`! (v1:real^3) v2 v3 v4.
       CARD {v1, v2, v3, v4} = 4 /\ ~coplanar_alt {v1, v2, v3, v4}
       ==> circumcenter {v1, v2, v3, v4} IN affine hull {v1, v2, v3, v4} /\
           (?r. !v. v IN {v1, v2, v3, v4}
                    ==> r = dist (circumcenter {v1, v2, v3, v4},v)) `,
MESON_TAC[VBVYGGT]);;

let THREE_POINTS_COP = prove(` ! v1 v2 (v3:real^3). coplanar_alt {v1,v2,v3} `,
MESON_TAC[DIMINDEX_3; ARITH_RULE` 2 <= 3 `; COPLANAR_3]);;

let PER_SET4 = SET_RULE ` {a,b,c,d} = {b,a,c,d} /\
  {a,b,c,d} = {c,b,a,d} /\
  {a,b,c,d} = {d,b,c,a} `;;

let NOT_COPLANAR_IMP_CARD4 = prove(` ~ coplanar_alt {(v1:real^3), v2, v3, v4} 
==> CARD {v1, v2, v3, v4} = 4 `, REWRITE_TAC[CARD4; IN_SET3] THEN 
MP_TAC (GEN_ALL THREE_POINTS_COP ) THEN 
MESON_TAC[PER_SET4; SET_RULE` {a,a,b,c} = {a,b,c} `]);;

let NOT_COPLANAR_IMP_EXISTS_CIR2 = MESON[NOT_COPLANAR_IMP_EXISTS_CIR ; 
NOT_COPLANAR_IMP_CARD4 ]` ! (v1:real^3) v2 v3 v4. ~ coplanar_alt {v1, v2, v3, v4}
       ==> circumcenter {v1, v2, v3, v4} IN affine hull {v1, v2, v3, v4} /\
           (?r. !v. v IN {v1, v2, v3, v4}
                    ==> r = dist (circumcenter {v1, v2, v3, v4},v)) `;;

let NOT_COPLANAR_IMP_RADV_PROPERTIES = prove(` ~coplanar_alt {(v1:real^3), v2, v3, v4} ==>
  (! w. {v1, v2, v3, v4} w ==> radV {v1, v2, v3, v4} 
    = dist (circumcenter {v1,v2,v3,v4} ,w) ) `,
NHANH (SPEC_ALL NOT_COPLANAR_IMP_EXISTS_CIR2) THEN 
REWRITE_TAC[IN; radV] THEN MESON_TAC[EXISTS_THM]);;

let ZJEWPAP = ` ! v1 v2 v3 (v4:real^3).
  let s = {v1, v2, v3, v4} in CARD s = 4 /\ ~ coplanar_alt s 
  ==> radV {v1,v2,v3}  <= radV s  `;;

let PHA = REWRITE_TAC[MESON[]` ( a ==> b ==> c <=> a /\ b ==> c ) /\
  ( (a /\ b ) /\ c <=> a /\ b /\ c ) `];;

let NOT_COL_EQ_UPS_X_POS = prove(`! v1 v2 v3.  ~ collinear {(v1:real^3), v2, v3} <=>
           &0 < ups_x (dist (v1,v2) pow 2) (dist (v1,v3) pow 2)
           (dist (v2,v3) pow 2) `,
MP_TAC (GEN_ALL ZERO_LE_UPS_X) THEN REWRITE_TAC[UPS_X_EQ_ZERO_COND] THEN 
REWRITE_TAC[UPS_X_EQ_ZERO_COND; REAL_ARITH` a <= b <=> a = b \/ a < b `] THEN 
REWRITE_TAC[dist3] THEN MESON_TAC[REAL_ARITH` ~( a = b /\ a < b ) `]);;

let ETA_Y_POW2_EQ = prove(`(dist (v1,v2) pow 2 * dist (v1,v3) pow 2 * dist (v2,v3) pow 2) /
      ups_x (dist (v1,v2) pow 2) (dist (v1,v3) pow 2) (dist (v2,v3) pow 2) =
( eta_y (dist3 v2 v3) (dist3 v1 v3) (dist3 v1 v2)) pow 2 `,
REWRITE_TAC[eta_y;dist3; eta_x] THEN LET_TR THEN 
REWRITE_TAC[GSYM REAL_POW_2; GSYM dist3 ] THEN 
SIMP_TAC[MESON[UPS_X_SYM]` ups_x a b c = ups_x c b a `; 
REAL_ARITH ` a * b * c = c * b * a `] THEN 
MESON_TAC[SQRT_WORKS; REAL_LE_SQUARE_POW; REAL_LE_MUL;
  REAL_LE_DIV; dist3 ; ZERO_LE_UPS_X; UPS_X_SYM]);;

let ETA_Y_POS_LE = prove(` &0 <= eta_y (dist3 v1 v2) (dist3 v1 v3) (dist3 v2 v3) `,
REWRITE_TAC[eta_y; eta_x] THEN LET_TR THEN REWRITE_TAC[GSYM REAL_POW_2] THEN 
MESON_TAC[REAL_LE_POW_2; REAL_LE_MUL; ZERO_LE_UPS_X; REAL_LE_DIV;
  SQRT_POS_LE]);;

(* lemma 87 *)
let ZJEWPAP = prove(` ! v1 v2 v3 (v4:real^3).
  let s = {v1, v2, v3, v4} in CARD s = 4 /\ ~ coplanar_alt s 
  ==> radV {v1,v2,v3}  <= radV s  `,
LET_TR THEN 
NHANH (MESON[COLLINEAR3_IMP_COPLANAR ]`~coplanar_alt {v1, v2, v3, v4}
  ==> ~ collinear {(v1:real^3),v2,v3} `) THEN 
SIMP_TAC[NOT_COLL_IMP_RADV_EQ_ETA_Y] THEN 
REWRITE_TAC[MESON[]` a /\ b /\ c <=> (a/\b)/\c`] THEN 
NHANH (SPEC_ALL VBVYGGT) THEN 
REPEAT GEN_TAC THEN 
NHANH (NOT_COPLANAR_IMP_RADV_PROPERTIES) THEN 
ABBREV_TAC ` pp = circumcenter {(v1:real^3), v2, v3, v4}` THEN 
MP_TAC (SPECL [`pp :real^3`; ` v1: real^3`; `v2:real^3`; ` v3:real^3`] DELTA_POS_4POINTS ) THEN 
REWRITE_TAC[REWRITE_RULE[IN] FORALL_IN_CLAUSES; 
   FORALL_IN_CLAUSES ] THEN 
REWRITE_TAC[MESON[]` ( a ==> b ==> c <=> a /\ b ==> c ) /\
  ( (a /\ b ) /\ c <=> a /\ b /\ c ) `] THEN 
REPEAT STRIP_TAC THEN 
UNDISCH_TAC ` &0 <=
      delta (dist ((pp:real^3),v1) pow 2) (dist (pp,v2) pow 2) (dist (pp,v3) pow 2)
      (dist (v1,v2) pow 2)
      (dist (v1,v3) pow 2)
      (dist (v2,v3) pow 2)` THEN 
ABBREV_TAC `p1 = dist ((pp:real^3),v1)` THEN 
ABBREV_TAC `p2 = dist ((pp:real^3),v2)` THEN 
ABBREV_TAC `p3 = dist ((pp:real^3),v3)` THEN 
 REPLICATE_TAC 3 (FIRST_X_ASSUM MP_TAC THEN MATCH_MP_TAC 
(MESON[]` a ==> b ==> a `)) THEN 
EXPAND_TAC "p1" THEN 
EXPAND_TAC "p2" THEN 
EXPAND_TAC "p3" THEN 
FIRST_X_ASSUM MP_TAC THEN 
REWRITE_TAC[NOT_COL_EQ_UPS_X_POS ] THEN 
REWRITE_TAC[NOT_COL_EQ_UPS_X_POS; DELTA_RRR_INTERPRETE] THEN 
SIMP_TAC[REAL_FIELD` &0 < a ==> -- b * c + r * a = a * ( r - ( b * c )  / a ) `] THEN 
SIMP_TAC[ETA_Y_POW2_EQ; REAL_LE_MUL_EQ] THEN 
UNDISCH_TAC ` radV {(v1:real^3), v2, v3, v4} = p1 ` THEN 
SIMP_TAC[] THEN 
EXPAND_TAC "p1" THEN 
UNDISCH_TAC `r = dist ((pp: real^3),v4)` THEN 
SIMP_TAC[] THEN 
REPLICATE_TAC 3 REMOVE_TAC THEN 
SIMP_TAC[ETA_Y_SYYM; REAL_ARITH` &0 <= a - b <=> b <= a `] THEN 
MESON_TAC[DIST_POS_LE; POW2_COND; ETA_Y_POS_LE ]);;

let FIRST_POINT_IN_AFF3 = prove(` ! w v1 v2. w IN aff {w,v1,v2} `,
REWRITE_TAC[aff; AFFINE_HULL_3; IN_ELIM_THM] THEN REPEAT GEN_TAC THEN 
EXISTS_TAC ` &1 ` THEN EXISTS_TAC `&0` THEN EXISTS_TAC `&0` THEN 
REWRITE_TAC[ZERO_NEUTRAL] THEN CONV_TAC VECTOR_ARITH);;

let THREE_GEN_POINTS_IN_AFF3 = MESON[PER_SET3; FIRST_POINT_IN_AFF3 ]` a IN aff {a,b,c} /\
  b IN aff {a,b,c} /\ c IN aff {a,b,c} `;;

let INSERT_SUBSET = SET_RULE` {} SUBSET s /\
  ( ( a INSERT s ) SUBSET ss <=> a IN ss /\ s SUBSET  ss ) `;;

let IMP_TAC = REWRITE_TAC[MESON[]` a /\ b ==> c <=> a ==> b ==> c `];;

(* MONG7_ROI *)

let NOT_COPLANAR_IMP_NOT_COLLINEAR =
  MATCH_MP (MESON[]` (a ==> b) ==> ~ b ==> ~ a `) (SPEC_ALL COLLINEAR3_IMP_COPLANAR);;

let SQRT4_EQ2 = prove(` sqrt ( &4 ) = &2 `,
REWRITE_TAC[REAL_ARITH` &4 = &2 pow 2 `] THEN 
MESON_TAC[POW_2_SQRT; REAL_ARITH` &0 <= &2 `]);;

let RHUFIIB = prove( ` !x12 x13 x14 x23 x24 x34.
         rho_ij' x12 x13 x14 x23 x24 x34 * ups_x x34 x24 x23 =
         chi x12 x13 x14 x23 x24 x34 pow 2 +
         &4 * delta x12 x13 x14 x23 x24 x34 * x34 * x24 * x23 `,
REWRITE_TAC[rho_ij'; chi; delta; ups_x] THEN REAL_ARITH_TAC);;

(* lemma 84 *)
let SHOGYBS = prove(` ! x1 x2 x3 (x4:real^3).
  ~coplanar_alt {x1,x2,x3,x4} ==>
         let x12 = dist (x1,x2) pow 2 in
         let x13 = dist (x1,x3) pow 2 in
         let x14 = dist (x1,x4) pow 2 in
         let x23 = dist (x2,x3) pow 2 in
         let x24 = dist (x2,x4) pow 2 in
         let x34 = dist (x3,x4) pow 2 in
  &0 <= rho_ij' x12 x13 x14 x23 x24 x34  `,
ONCE_REWRITE_TAC[SET_RULE` {v1,v2,v3,v4} =  {v2,v3,v4,v1} `] THEN 
NHANH (NOT_COPLANAR_IMP_NOT_COLLINEAR) THEN 
ONCE_REWRITE_TAC[GSYM (SET_RULE` {v1,v2,v3,v4} =  {v2,v3,v4,v1} `)] THEN 
REWRITE_TAC[NOT_COL_EQ_UPS_X_POS] THEN REPEAT GEN_TAC THEN 
MP_TAC (SPEC_ALL DELTA_POS_4POINTS) THEN 
REPEAT LET_TAC THEN MP_TAC (SPEC_ALL RHUFIIB) THEN DOWN_TAC THEN 
NHANH (MESON[REAL_LE_POW_2]` a pow 2 = b   ==> &0 <= b `) THEN DAO THEN 
SIMP_TAC[UPS_X_SYM] THEN 
REWRITE_TAC[MESON[REAL_FIELD` &0 < a ==> (b * a = c <=> b = c / a )`]`
  &0 < a /\a1 /\a2/\ b * a = c /\l <=>  &0 < a /\a1 /\a2/\ b = c / a /\ l `] THEN 
MP_TAC (REAL_ARITH` &0 <= &4 `) THEN PHA THEN 
NHANH (MESON[REAL_LT_IMP_LE; REAL_LE_DIV;
  REAL_LE_MUL; REAL_LE_ADD; REAL_LE_POW_2]`  &0 <= &4 /\
 &0 < ups_x x23 x24 x34 /\a1/\
 &0 <= delta x12 x13 x14 x23 x24 x34 /\ a2 /\
 &0 <= x34 /\a3 /\ &0 <= x24 /\a4 /\ &0 <= x23 /\a5/\
 &0 <= x14 /\a6 /\ &0 <= x13 /\a7 /\a8 /\ &0 <= x12 ==> 
  &0 <= &4 * delta x12 x13 x14 x23 x24 x34 * x34 * x24 * x23 `) THEN 
ABBREV_TAC ` aaa = &4 * delta x12 x13 x14 x23 x24 x34 * x34 * x24 * x23 ` THEN STRIP_TAC THEN 
FIRST_X_ASSUM MP_TAC THEN UNDISCH_TAC ` rho_ij' x12 x13 x14 x23 x24 x34 =
      (chi x12 x13 x14 x23 x24 x34 pow 2 + aaa) / ups_x x23 x24 x34 ` THEN 
UNDISCH_TAC`&0 < ups_x x23 x24 x34` THEN MESON_TAC[REAL_LT_IMP_LE; REAL_LE_DIV;
  REAL_LE_MUL; REAL_LE_ADD; REAL_LE_POW_2]);;

(* le 86 . GDRQXLG *)

let GDRQXLG = prove(` ! v1 v2 v3 (v4:real^3).
  let s = {v1, v2, v3, v4} in
let x12 = dist (v1,v2) pow 2 in
                    let x13 = dist (v1,v3) pow 2 in
                    let x14 = dist (v1,v4) pow 2 in
                    let x23 = dist (v2,v3) pow 2 in
                    let x24 = dist (v2,v4) pow 2 in
                    let x34 = dist (v3,v4) pow 2 in
     CARD s = 4 /\ ~coplanar_alt s
     ==> radV s =
        sqrt ( rho_ij' x12 x13 x14 x23 x24 x34) /
         (&2 * sqrt (delta x12 x13 x14 x23 x24 x34))`,
REPEAT GEN_TAC THEN REPEAT LET_TAC THEN EXPAND_TAC "s" THEN 
NHANH (NOT_COPLANAR_IMP_RADV_PROPERTIES) THEN 
NHANH (REWRITE_RULE[RIGHT_FORALL_IMP_THM] (GEN `p:real^3` PROVE_DIST_FROM_V1  )) THEN 
NHANH (REWRITE_RULE[RIGHT_FORALL_IMP_THM] (GEN `p:real^3` PROVE_EQ_DIST_FROM4 ) ) THEN 
REWRITE_TAC[GSYM POS_EQ_NOT_COPLANANR] THEN 
NHANH (REAL_ARITH` &0 < a ==> ~( a = &0 )`) THEN 
NHANH (PROVE_IN_AFFINE_HULL_4 ) THEN LET_TR THEN 
REWRITE_TAC[MESON[]`(!x. x = a ==> p x) <=> p a `] THEN 
ABBREV_TAC `taa = (&1 /    (&2 *
     delta (dist (v1,v2) pow 2) (dist (v1,v3) pow 2) (dist (v1,v4) pow 2)
     (dist (v2,v3) pow 2)
     (dist (v2,v4) pow 2)
     (dist (v3,v4) pow 2)) %
    (chi (dist (v1,v2) pow 2) (dist (v1,v3) pow 2) (dist (v1,v4) pow 2)
     (dist (v2,v3) pow 2)
     (dist (v2,v4) pow 2)
     (dist (v3,v4) pow 2) %
     (v1:real^3) +
     chi (dist (v1,v2) pow 2) (dist (v2,v4) pow 2) (dist (v2,v3) pow 2)
     (dist (v1,v4) pow 2)
     (dist (v1,v3) pow 2)
     (dist (v3,v4) pow 2) %
     v2 +
     chi (dist (v3,v4) pow 2) (dist (v1,v3) pow 2) (dist (v2,v3) pow 2)
     (dist (v1,v4) pow 2)
     (dist (v2,v4) pow 2)
     (dist (v1,v2) pow 2) %
     v3 +
     chi (dist (v3,v4) pow 2) (dist (v2,v4) pow 2) (dist (v1,v4) pow 2)
     (dist (v2,v3) pow 2)
     (dist (v1,v3) pow 2)
     (dist (v1,v2) pow 2) %
     v4)) ` THEN 
REWRITE_TAC[ POS_EQ_NOT_COPLANANR] THEN NGOAC THEN 
NHANH (SPEC_ALL UNIQUE_EXISISTING_PROPERTY_C4 ) THEN 
REWRITE_TAC[FORALL_IN_CLAUSES] THEN ABBREV_TAC ` abc = &1 / &2 *
 rho_ij' (dist (v1,v2) pow 2) (dist (v1,v3) pow 2) (dist (v1,v4) pow 2)
 (dist (v2,v3) pow 2) (dist (v2,v4) pow 2) (dist (v3,v4) pow 2) /
 (&2 *
  delta (dist ((v1:real^3),v2) pow 2) (dist (v1,v3) pow 2) (dist (v1,v4) pow 2)
  (dist (v2,v3) pow 2)
  (dist (v2,v4) pow 2)
  (dist (v3,v4) pow 2)) ` THEN REWRITE_TAC[dist3] THEN 
NHANH (MESON[POW_2_SQRT; DIST_POS_LE]` dist (taa,v2) pow 2 = a ==>
  dist(taa,v2) = sqrt a `) THEN PHA THEN 
NHANH (MESON[]`(!p. p IN affine hull {v1, v2, v3, v4} /\
      (?r. r = dist (p,v1) /\
           r = dist (p,v2) /\
           r = dist (p,v3) /\
           r = dist (p,v4))
      ==> p = circumcenter {v1, v2, v3, v4}) /\ a11 /\
 taa IN affine hull {v1, v2, v3, v4} /\
 dist (taa,v2) pow 2 = abc /\
 dist (taa,v2) = sqrt abc /\
 dist (taa,v3) pow 2 = abc /\
 dist (taa,v3) = sqrt abc /\
 dist (taa,v4) pow 2 = abc /\
 dist (taa,v4) = sqrt abc /\
 dist (taa,v1) pow 2 = abc /\
 dist (taa,v1) = sqrt abc /\ lll ==> taa = circumcenter {v1, v2, v3, v4} `) THEN 
NHANH (SET_RULE ` (!w. {v1, v2, v3, v4} w ==> P w ) ==> P v1 `) THEN PHA THEN 
REWRITE_TAC[MESON[]` a = dist (aa,b) /\ ta = aa <=> ta = aa  /\ a = dist (ta,b) `] THEN 
NHANH (MESON[]` a = b /\ a1 /\ a2 /\ c = a ==> c = b `) THEN NHANH (SPEC_ALL SHOGYBS) THEN 
MP_TAC (SPECL [`v1:real^3`;` v2:real^3`;`v3:real^3`;`v4:real^3`] 
DELTA_POS_4POINTS) THEN REPEAT LET_TAC THEN IMP_TAC THEN REPEAT (FIRST_X_ASSUM MP_TAC) THEN 
REWRITE_TAC[MESON[]` a = b ==> P a <=> a = b ==> P b `] THEN 
REWRITE_TAC[MESON[]` a = b ==> a = c <=> a = b ==> c = b `] THEN REPEAT STRIP_TAC THEN 
UNDISCH_TAC ` &1 / &2 *      rho_ij' x12 x13 x14 x23 x24 x34 / (&2 * delta x12 x13 x14 x23 x24 x34) =
      abc ` THEN UNDISCH_TAC ` &0 <= rho_ij' x12 x13 x14 x23 x24 x34 ` THEN 
ABBREV_TAC ` edl = delta x12 x13 x14 x23 x24 x34 ` THEN UNDISCH_TAC` &0 <= edl ` THEN 
SIMP_TAC[GSYM SQRT_MUL; GSYM SQRT4_EQ2] THEN 
SIMP_TAC[REAL_LE_MUL;  GSYM SQRT_DIV] THEN 
REWRITE_TAC[SQRT4_EQ2] THEN MESON_TAC[REAL_FIELD` &1 / &2 * x34 / (&2 * edl) =  x34 / (&4 * edl)`]);;

end;;  
